{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.jpeg","path":"images/logo.jpeg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1521781963000},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1521781963000},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1521781963000},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1521781963000},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1521781963000},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1521781963000},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1521781947000},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1521781963000},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1521781963000},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1521781963000},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1521781963000},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1521781963000},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1521781963000},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1521781963000},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1521781963000},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1521781963000},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1521781963000},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1521781963000},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1521781963000},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1521781963000},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1521781963000},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1521781963000},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1521781963000},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1521781963000},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1521781963000},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1521781963000},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1521781963000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1521781963000},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1521781963000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1521781963000},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1521781963000},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1521781963000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1521781963000},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1521781963000},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1521781963000},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1521781963000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1521781963000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1521781963000},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1521781963000},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1521781963000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1521781963000},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1521781963000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1521781963000},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1521781963000},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1521781963000},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1521781963000},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1521781963000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1521781963000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1521781963000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1521781963000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1521781963000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1521781963000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1521781963000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1521781963000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1521781963000},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1521781963000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1521781963000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1521781963000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1521781963000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1521781963000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1521781963000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1521781963000},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1521781963000},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1521781963000},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1521781963000},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1521781963000},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1521781963000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1521781963000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1521781963000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1521781963000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1521781963000},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1521781963000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1521781963000},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1521781963000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1521781963000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1521781963000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1521781963000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1521781963000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1521781963000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1521781963000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1521781963000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1521781963000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1521781963000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1521781963000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1521781963000},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1521781963000},{"_id":"themes/next/.bowerrc","hash":"80e096fdc1cf912ee85dd9f7e6e77fd40cf60f10","modified":1521787516000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1521116074000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1521116074000},{"_id":"themes/next/.gitignore","hash":"efec790f5b7a0256763e1cc08f12c4f0aff509f6","modified":1521787516000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1521116074000},{"_id":"themes/next/.javascript_ignore","hash":"d619ee13031908cd72666e4ff652d2ea3483b1c3","modified":1521787516000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1521116074000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1521116074000},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1521116074000},{"_id":"themes/next/LICENSE.md","hash":"fc7227c508af3351120181cbf2f9b99dc41f063e","modified":1521116074000},{"_id":"themes/next/README.md","hash":"8651957de204a954f15945cbc81417a19d3c4df3","modified":1521787516000},{"_id":"themes/next/bower.json","hash":"f89c6700a11d81e067cc97273ca6bf96cb88c8f9","modified":1521787516000},{"_id":"themes/next/_config.yml","hash":"56679ffb4fe1fb2c8b50c0208883f7fdec49b7ad","modified":1521820698000},{"_id":"themes/next/crowdin.yml","hash":"fe22a450cc1272b7ac5476e6b33a999f8b8a2034","modified":1521116074000},{"_id":"themes/next/gulpfile.coffee","hash":"26e5b1b945704c8bc78b928feede895c4c111c95","modified":1521787516000},{"_id":"themes/next/package.json","hash":"63e9c0f1dd9e5d7f51b4ae383981ef939a2ed45d","modified":1521787516000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1521787516000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1521787516000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"7abbb4c8a29b2c14e576a00f53dbc0b4f5669c13","modified":1521116074000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1521116074000},{"_id":"themes/next/.github/stale.yml","hash":"1bbdd20d025010ec57225712be82988a26485836","modified":1521116074000},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1521116074000},{"_id":"themes/next/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1521116074000},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"141e989844d0b5ae2e09fb162a280715afb39b0d","modified":1521116074000},{"_id":"themes/next/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1521116074000},{"_id":"themes/next/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1521116074000},{"_id":"themes/next/docs/LICENSE","hash":"fe607fe22fc9308f6434b892a7f2d2c5514b8f0d","modified":1521116074000},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1521116074000},{"_id":"themes/next/docs/MATH.md","hash":"d047b8a3d9aa49b478a33e5a326195d460cb4589","modified":1521116074000},{"_id":"themes/next/languages/bg.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521116074000},{"_id":"themes/next/languages/_en.yml","hash":"a680b1adb920b5760a84b1656bee5d2aaedd5689","modified":1521116074000},{"_id":"themes/next/languages/bn.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521116074000},{"_id":"themes/next/languages/ar.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521116074000},{"_id":"themes/next/languages/cs.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521116074000},{"_id":"themes/next/languages/el.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521116074000},{"_id":"themes/next/languages/de.yml","hash":"786afba25cfc98845a20d9901823ebeebcd1cbbf","modified":1521787516000},{"_id":"themes/next/languages/es.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521116074000},{"_id":"themes/next/languages/da.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521116074000},{"_id":"themes/next/languages/fa.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521116074000},{"_id":"themes/next/languages/et.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521116074000},{"_id":"themes/next/languages/fi.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521116074000},{"_id":"themes/next/languages/fr.yml","hash":"dacb82b46d7b79656cdb75768a031fa73f178477","modified":1521116074000},{"_id":"themes/next/languages/he.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521116074000},{"_id":"themes/next/languages/hu.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521116074000},{"_id":"themes/next/languages/hr.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521116074000},{"_id":"themes/next/languages/id.yml","hash":"147c01e41b931085ad14250fa900c2249dcbbdd7","modified":1521787516000},{"_id":"themes/next/languages/hi.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521116074000},{"_id":"themes/next/languages/it.yml","hash":"f0fb26ab84e5d0508ddc07bd67d581033520bb43","modified":1521116074000},{"_id":"themes/next/languages/ja.yml","hash":"a2c7b6301b5474aab798946fb700289df237c3cf","modified":1521787516000},{"_id":"themes/next/languages/ko.yml","hash":"c95a00066bda4c04ce7bf65f8bf08e82c4d8fbcf","modified":1521116074000},{"_id":"themes/next/languages/jv.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521116074000},{"_id":"themes/next/languages/lt.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521116074000},{"_id":"themes/next/languages/lv.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521116074000},{"_id":"themes/next/languages/ms.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521116074000},{"_id":"themes/next/languages/no.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521116074000},{"_id":"themes/next/languages/nl.yml","hash":"8fc1165a138081d25ff4c171dea2980ce71fe2b0","modified":1521116074000},{"_id":"themes/next/languages/pt-BR.yml","hash":"268188db09c6779a570c8fc647ccc1a73322476c","modified":1521116074000},{"_id":"themes/next/languages/pa.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521116074000},{"_id":"themes/next/languages/pl.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521116074000},{"_id":"themes/next/languages/ro.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521116074000},{"_id":"themes/next/languages/pt.yml","hash":"ca239b39bf65c9462e59d51b12f0fe566d453197","modified":1521787516000},{"_id":"themes/next/languages/ru.yml","hash":"cc7b964a46587aea0e57b0a5269d8fd25570858e","modified":1521787516000},{"_id":"themes/next/languages/sl.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521116074000},{"_id":"themes/next/languages/sv.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521116074000},{"_id":"themes/next/languages/sr.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521116074000},{"_id":"themes/next/languages/vi.yml","hash":"7792081d90122327f913f224f31965460936df5a","modified":1521116074000},{"_id":"themes/next/languages/th.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521116074000},{"_id":"themes/next/languages/tr.yml","hash":"efc298288935bf892efc9707b1ae4ea92d5fb7b4","modified":1521116074000},{"_id":"themes/next/languages/zh-CN.yml","hash":"182c3915292297c82a862b4c87dd5847e87a3c17","modified":1521116074000},{"_id":"themes/next/languages/uk.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521116074000},{"_id":"themes/next/languages/zh-TW.yml","hash":"1f025215f1ac03dd4db9b4f87aa393ee43494bc3","modified":1521116074000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1521787516000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1521787516000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1521787516000},{"_id":"themes/next/layout/page.swig","hash":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1521787516000},{"_id":"themes/next/languages/zh-HK.yml","hash":"f7b3304e44959f74149a01d5f140fef64bfb3fa1","modified":1521116074000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1521787516000},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1521787516000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1521116074000},{"_id":"themes/next/layout/_layout.swig","hash":"74157f6cfd679ea11febec632542793f37c5e5d4","modified":1521787516000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1521116074000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1521787516000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1521116074000},{"_id":"themes/next/test/.jshintrc","hash":"096ed6df627373edd820f24d46b8baf528dee61d","modified":1521787516000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1521116074000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521116074000},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1521116074000},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1521116074000},{"_id":"themes/next/docs/ru/README.md","hash":"ff13616581bab8c836505e11bd425a6cbf0ce4ff","modified":1521116074000},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1521116074000},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"6855402e2ef59aae307e8bd2a990647d3a605eb8","modified":1521116074000},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1521116074000},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1521116074000},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"59811e21ba41420b7093e210d6a584aac9fc1a9b","modified":1521116074000},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"1c7df019737656fdfd8d124c7c045a64ac8a2a8d","modified":1521116074000},{"_id":"themes/next/docs/zh-CN/README.md","hash":"24753b3ddc287519252a25ee0496e83db4720ad6","modified":1521116074000},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"c1ba919f70efe87a39e6217883e1625af0b2c23c","modified":1521116074000},{"_id":"themes/next/layout/_custom/head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1521116074000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1521116074000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1521116074000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1521787516000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"464082e431ea5b06df782d5f312ee25be9e5f169","modified":1521116074000},{"_id":"themes/next/layout/_macro/post.swig","hash":"26a8f0286387b5798456a791c62ad3a984a71729","modified":1521821353000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"85327c2174d09c6d69c9033592e6c8f7eb7ac3ba","modified":1521787516000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1521787516000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"b883289054ee54a374caad5d4883591beb94bd8b","modified":1521787516000},{"_id":"themes/next/layout/_partials/breadcrumb.swig","hash":"6994d891e064f10607bce23f6e2997db7994010e","modified":1521116074000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"cb5117995355c82043c8e6ed76c9a1dfff8a6812","modified":1521787516000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"b28cb4113c44b8c57f5fd7150abdae75655a1f69","modified":1521789797000},{"_id":"themes/next/layout/_partials/header.swig","hash":"963a765dc00e6ac43cfc53ffaf5725eb854cf95e","modified":1521787516000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1521787516000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1aaf32bed57b976c4c1913fd801be34d4838cc72","modified":1521116074000},{"_id":"themes/next/layout/_partials/search.swig","hash":"011b9d6c9f0a2f4654908ea20b9391f9b7981271","modified":1521787516000},{"_id":"themes/next/layout/_partials/sub-menu.swig","hash":"9783a9569fe8344ed287013156e52ca1b0a25544","modified":1521116074000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1521116074000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1521116074000},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"ac3ad2c0eccdf16edaa48816d111aaf51200a54b","modified":1521116074000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1521787516000},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"60001c8e08b21bf3a7afaf029839e1455340e95d","modified":1521116074000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1521116074000},{"_id":"themes/next/layout/_third-party/github-banner.swig","hash":"cabd9640dc3027a0b3ac06f5ebce777e50754065","modified":1521116074000},{"_id":"themes/next/layout/_macro/post-related.swig","hash":"08fe30ce8909b920540231e36c97e28cfbce62b6","modified":1521116074000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"927f19160ae14e7030df306fc7114ba777476282","modified":1521116074000},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"6b75c5fd76ae7cf0a7b04024510bd5221607eab3","modified":1521116074000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1521116074000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1521116074000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1521116074000},{"_id":"themes/next/scripts/tags/button.js","hash":"5a61c2da25970a4981fbd65f4a57c5e85db4dcda","modified":1521116074000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1521787516000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"2b3a4dc15dea33972c0b6d46a1483dabbf06fb5b","modified":1521116074000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1521787516000},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"b7600f6b868d8f4f7032126242d9738cd1e6ad71","modified":1521116074000},{"_id":"themes/next/scripts/tags/label.js","hash":"621004f2836040b12c4e8fef77e62cf22c561297","modified":1521116074000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1521787516000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"460e5e1f305847dcd4bcab9da2038a85f0a1c273","modified":1521116074000},{"_id":"themes/next/scripts/tags/note.js","hash":"4975d4433e11161b2e9a5744b7287c2d667b3c76","modified":1521116074000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1521116074000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1521787516000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1521116074000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1521116074000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1521116074000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1521116074000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1521116074000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1521116074000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1521116074000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1521116074000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1521116074000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1521116074000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1521116074000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1521116074000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1521116074000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1521116074000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1521116074000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1521116074000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1521116074000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1521116074000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521116074000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521116074000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521116074000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521116074000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521116074000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521116074000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521116074000},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"6a04cd1ef9ebac103d86b61505fa9b0f26268fdc","modified":1521116074000},{"_id":"themes/next/layout/_macro/menu/menu-badge-1.swig","hash":"7ffc5c159ab566805ceda6b8c7a4149a7e296116","modified":1521116074000},{"_id":"themes/next/layout/_macro/menu/menu-badge-2.swig","hash":"7b96a0e6079e845573338523cea4437817a4b1e1","modified":1521116074000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1521116074000},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"cd7e3331a61939c820e0437bf5d815cb0a42fefb","modified":1521116074000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1521787516000},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"9f7aa33a620aea6ede1fb907b61fd071c018c525","modified":1521116074000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1521116074000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"7ca5cb4daa58b3504e17f3e02975e794bc634658","modified":1521787516000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1521116074000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"c07f7b2f264e5215b8ed42d67e8cef2477558364","modified":1521787516000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1521116074000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1521787516000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1521116074000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1521116074000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1521116074000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1521116074000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1521116074000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1521116074000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"67f0cb55e6702c492e99a9f697827629da036a0c","modified":1521116074000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1521116074000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1521116074000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"beb53371c035b62e1a2c7bb76c63afbb595fe6e5","modified":1521116074000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"94b26dfbcd1cf2eb87dd9752d58213338926af27","modified":1521116074000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1521116074000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"cee047575ae324398025423696b760db64d04e6f","modified":1521116074000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1521116074000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1521116074000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1521116074000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1521116074000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"fe8177e4698df764e470354b6acde8292a3515e0","modified":1521116074000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"2fbee33a4ccd7c8217c73e85a9a1488170e05629","modified":1521116074000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"40e3cacbd5fa5f2948d0179eff6dd88053e8648e","modified":1521116074000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"17a54796f6e03fc834880a58efca45c286e40e40","modified":1521116074000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"6f340d122a9816ccdf4b45b662880a4b2d087671","modified":1521116074000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"c0eb6123464d745ac5324ce6deac8ded601f432f","modified":1521116074000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"42f62695029834d45934705c619035733762309e","modified":1521116074000},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"a6fc00ec7f5642aabd66aa1cf51c6acc5b10e012","modified":1521116074000},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"97dbc2035bcb5aa7eafb80a4202dc827cce34983","modified":1521116074000},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"011ae6303afacddabc4ddf570fe3dd227569cd4f","modified":1521116074000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1521116074000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1521116074000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"b15e10abe85b4270860a56c970b559baa258b2a8","modified":1521116074000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1521116074000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"a20d4741e21878e2cd7971412bd40541866f38a3","modified":1521820126000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1521116074000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1521787516000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1521787516000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"7a2706304465b9e673d5561b715e7c72a238437c","modified":1521116074000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1521787516000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"3ead77befa064d6327dc7afd0a5af7be59a5f196","modified":1521787516000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"17624186f7a1f28daddea258d044f8e03b2f4bea","modified":1521787516000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1521116074000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1521116074000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1521787516000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1521116074000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1521116074000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1521787516000},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1521787516000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1521116074000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1521116074000},{"_id":"themes/next/source/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1521787516000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1521116074000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1521116074000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1521116074000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1521116074000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1521116074000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1521116074000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1521116074000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1521116074000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1521116074000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1521116074000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1521116074000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1521116074000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1521116074000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1521787516000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1521787516000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1521787516000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1521787516000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1521116074000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1521116074000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1521787516000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1521787516000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1521116074000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1521116074000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1521787516000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1521787516000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1521116074000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"f362fbc791dafb378807cabbc58abf03e097af6d","modified":1521116074000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1521787516000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1521116074000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"8d3cd9d0d8de871ea1b7ff09b195849f20ffeef9","modified":1521787516000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1521787516000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1521116074000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6ed60cc621bac096c0ed7534fa25b1a52dc571d4","modified":1521787516000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1521787516000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1521116074000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c2c6c4f6434b4f94aac2af5861cd769427f0ee10","modified":1521787516000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1521116074000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1521787516000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"be22ad34f546a07f6d56b424338cdd898683eea4","modified":1521787516000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"8d7cecde4933900c7df2db9d0a98f5f82f88dc93","modified":1521787516000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1521787516000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1521116074000},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"a863f2c8bae1fbccdc181a5d178b808cd80c5b5e","modified":1521116074000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d4b7bd610ca03dbb2f5b66631c0e84a79fb4660b","modified":1521787516000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1521787516000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1521787516000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1521116074000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1521116074000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1521116074000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1521116074000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1521116074000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1521116074000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1521116074000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1521116074000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1521787516000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1521116074000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4da051c7f3924fa2db1e73c55b2baf1c2c150255","modified":1521787516000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"90f8f9706cd7fe829cf06e9959a65fd3f8b994fa","modified":1521787516000},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"ee37e6c465b9b2a7e39175fccfcbed14f2db039b","modified":1521116074000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1521787516000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1521116074000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1521787516000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1521116074000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1521116074000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1521787516000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1521116074000},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"7dd9a0378ccff3e4a2003f486b1a34e74c20dac6","modified":1521116074000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"3c46efd6601e268093ce6d7b1471d18501878f0d","modified":1521787516000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1521116074000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1521116074000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1521116074000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1521787516000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1521116074000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1521116074000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1521787516000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d543d1377c1f61b70e3adb6da0eb12797552e5f2","modified":1521787516000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1521116074000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"cbca4842a54950e2934b3b8f3cd940f122111aef","modified":1521787516000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1521787516000},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"f4e9f870baa56eae423a123062f00e24cc780be1","modified":1521116074000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1521116074000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1521116074000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1521116074000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1521787516000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1521116074000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4eb18b12fa0ea6c35925d9a64f64e2a7dae8c7fd","modified":1521787516000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1521787516000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1521787516000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1521116074000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1521116074000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1521116074000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1521116074000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1521787516000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1521116074000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1521787516000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1521787516000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1521116074000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1521787516000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1521116074000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1521116074000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1521116074000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1521116074000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1521116074000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8e66c2635d48e11de616bb29c4b1323698eebc0a","modified":1521787516000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1521116074000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1521116074000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"10e9bb3392826a5a8f4cabfc14c6d81645f33fe6","modified":1521116074000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1521116074000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1521116074000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1521116074000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1521787516000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"795d94561888d31cb7a6ff4a125596809ea69b7d","modified":1521787516000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1521116074000},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"76937db9702053d772f6758d9cea4088c2a6e2a3","modified":1521116074000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"3afc459442c132c480d1d832f1a872f1070bb048","modified":1521787516000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1521787516000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1521116074000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1521787516000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1521116074000},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1521787516000},{"_id":"themes/next/branch_readme.md","hash":"cdaa67ffe307f4ca073de5270bea20920ea8512a","modified":1521787516000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1521787516000},{"_id":"themes/next/.git/config","hash":"2d48010e6fd68ce88d58f1c52edcd578e1888e40","modified":1521788836000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1521787453000},{"_id":"themes/next/.git/index","hash":"474203ea6ba3bc1489c5bb9907ce6921b0c827ce","modified":1521821461000},{"_id":"themes/next/.git/packed-refs","hash":"35e12d5985dbd4667a0f618f1d2d0fbb6bf9919f","modified":1521787516000},{"_id":"themes/next/languages/default.yml","hash":"9db835c0543ade5a89bc80ec5a898203227cf3d8","modified":1521787516000},{"_id":"themes/next/languages/en.yml","hash":"f03799cbdb5a33064ead080bcac4baca1f6bc5f9","modified":1521787516000},{"_id":"themes/next/languages/fr-FR.yml","hash":"1a084623c39de74301f3e92f9388a3a815a542ca","modified":1521787516000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"0072cac4ae4593329b9c23e043f3894674bb9822","modified":1521789907000},{"_id":"themes/next/languages/zh-hk.yml","hash":"519ab3d817ec3bc5bfc91159c494b6b3c170bea7","modified":1521787516000},{"_id":"themes/next/languages/zh-tw.yml","hash":"6b1f345aaefc13e6723dc8a6741b59ac05c20dfd","modified":1521787516000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1521787453000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1521787453000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1521787453000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1521787453000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1521787453000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1521787453000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1521787453000},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1521787453000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1521787453000},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1521787453000},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1521787453000},{"_id":"themes/next/.git/logs/HEAD","hash":"d7b4cab9995dc6b9f24c55b431c861b20d0aa2cf","modified":1521821461000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"786a42ecaf928955368259caba7bdf868f971a3c","modified":1521787516000},{"_id":"themes/next/layout/_partials/head.swig","hash":"f83b1c55bedd2c1a3eb734c72c6997795a4e5f99","modified":1521787516000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"82d060fe055d6e423bbc9199f82dfe5c68e74779","modified":1521787516000},{"_id":"themes/next/.git/refs/heads/master","hash":"84e98add1f3b9ed3a46e643da89e87416695f112","modified":1521821461000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"069bb17fb1db3bc7c85c88efa3ed94ab6becbe2c","modified":1521787516000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"0a89c04055bade7baa5962f1d5aefe438d83a244","modified":1521787516000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"907b931d775d32405d02a25b3b0a3ac03bf804d0","modified":1521787516000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"1561bd0c107d725252c6d746e9ac177fc18f93bf","modified":1521787516000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"5bafc33f57508d1d04a9930165240f6e9efa8d6d","modified":1521787516000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1521787516000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1521787516000},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1521787516000},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1521787516000},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1521787516000},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"7da985a99674e54f514d4fd9fcd3bcea6e7e41d5","modified":1521787516000},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1521787516000},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1521787516000},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1521787516000},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1521787516000},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1521787516000},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1521787516000},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1521787516000},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1521787516000},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1521787516000},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1521787516000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1521787516000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1521787516000},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1521787516000},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1521787516000},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1521787516000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1521787516000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1521787516000},{"_id":"themes/next/.git/objects/pack/pack-56caf432a8e9734b8f99b0109536d194ec307168.idx","hash":"3f4fc58cebef8719c1998aac92f9823e46215959","modified":1521787516000},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1521787516000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"d7b4cab9995dc6b9f24c55b431c861b20d0aa2cf","modified":1521821461000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1521787516000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"3491d3cebabc8a28857200db28a1be65aad6adc2","modified":1521787516000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1521787516000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1521787516000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1521787516000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"8c7af79407d223486fba72b8150fe045a553bf70","modified":1521787516000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"44e761721e8ad787ef571a3cc57bbc12d318a2a3","modified":1521787516000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"334176d838ee528e58468d8bc74ff3a6d3f25b2b","modified":1521787516000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1521787516000},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1521787516000},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1521787516000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1521787516000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1521787516000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1521787516000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1521787516000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1521787516000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1521787516000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1521787516000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1521787516000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1521787516000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1521787516000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1521787516000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1521787516000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1521787516000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1521787516000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1521787516000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1521787516000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1521787516000},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1521787516000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1521787516000},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1521787516000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"6ae672725a206c3fd10f0e549a0f88740c64bd10","modified":1521788836000},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1521787516000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1521787516000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1521787516000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1521787516000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1521787516000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1521787516000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1521787516000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1521787516000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1521787516000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1521787516000},{"_id":"themes/next/.git/objects/pack/pack-56caf432a8e9734b8f99b0109536d194ec307168.pack","hash":"42414c28ee3e7361021e849297f9d9cd1c90565b","modified":1521787516000},{"_id":"source/tags/index.md","hash":"1e9530fc6103d6ed327faf988b719fe9f189ccbd","modified":1521790266000},{"_id":"source/about/index.md","hash":"fe25801ebd488ec0ee5b4094ca199b4e0567fef0","modified":1521790365000},{"_id":"themes/next/.DS_Store","hash":"94a9483292cd7f33d0ee10197ac6333e16adb778","modified":1521791010000},{"_id":"themes/next/uploads/logo.jpeg","hash":"981b5491284d7d82569d12bb3406b7cb6edb4690","modified":1506312410000},{"_id":"themes/next/images/logo.jpeg","hash":"981b5491284d7d82569d12bb3406b7cb6edb4690","modified":1506312410000},{"_id":"themes/next/.git/objects/66/dfa0618a54f6980885888e89002ead0ecca574","hash":"e0ab028ed42306cd321ab60aea5165b9161f60b9","modified":1521791346000},{"_id":"themes/next/.git/objects/cb/f29248e3cb2b24129cb406fa509f43b19eb3e8","hash":"03a99c97fad5423d91bd5595203bd1194f9351d9","modified":1521791346000},{"_id":"themes/next/.git/objects/07/3d7b48da793d3eb1a2004ce42a7833aac61140","hash":"ff42a0016e3e678d2df631aaf2a5da66325c5cbd","modified":1521791346000},{"_id":"themes/next/.git/objects/bc/d98d1fc6c21c497eaa987c335b3f7c4e4d575a","hash":"cd8557906e55d34a00f027d139a9da4da1aeed56","modified":1521791346000},{"_id":"themes/next/.git/objects/cc/7a467b22f5fd7bb29d907a1838c949ca65c32a","hash":"8c7d5f58398c273fc7741b59a4f62b48ba7fa903","modified":1521791374000},{"_id":"themes/next/.git/objects/e2/39a0b33563753bbb1fe3fc0bcd9a6b4d33813b","hash":"9620a2d4af9f035e92890177ba0cc76ce5747b11","modified":1521791374000},{"_id":"themes/next/.git/objects/13/658c5625ab84dc65c75b47e83c957b0204d455","hash":"ebf542d5fa119165b375d15eb3168c8291b5d917","modified":1521791374000},{"_id":"themes/next/.git/objects/5d/b21d5129aaa1728cbdb1458ae466e851d1e211","hash":"a48461f98ecdaf16bdd6fb099d07964d61b576a7","modified":1521791374000},{"_id":"themes/next/.git/objects/57/413b8c45033ad4cd77b9dec9c7ee22d5de6158","hash":"c98dce4d6a12670270b32497b0d320e22b527857","modified":1521791374000},{"_id":"themes/next/.git/objects/a8/c2c50401426f68f90c9d02cf5afe9b237a9a77","hash":"3cd6bf2b0d35323373bac3bef667aceb993d7b8b","modified":1521791374000},{"_id":"themes/next/.git/objects/bf/0461b8da6ce65988928000426b4fa58fc3371a","hash":"0b4f4d6c977e7a75e2296f898304791c20b3d569","modified":1521791374000},{"_id":"source/_posts/RN打包那些事儿.md","hash":"7c45d6fc595f0d091c6473d58b147ca3e2b88278","modified":1521821517000},{"_id":"themes/next/.git/COMMIT_EDITMSG","hash":"7c5616aeef99de43b53d2a8c7050f67da1d1ee2a","modified":1521821461000},{"_id":"themes/next/.git/FETCH_HEAD","hash":"3fc26a1ba8c98817a096b1bd78f17e7f73d31e81","modified":1521821475000},{"_id":"themes/next/.git/ORIG_HEAD","hash":"84e98add1f3b9ed3a46e643da89e87416695f112","modified":1521821477000},{"_id":"themes/next/source/images/logo.jpeg","hash":"981b5491284d7d82569d12bb3406b7cb6edb4690","modified":1506312410000},{"_id":"themes/next/.git/refs/remotes/origin/master","hash":"84e98add1f3b9ed3a46e643da89e87416695f112","modified":1521821490000},{"_id":"themes/next/.git/logs/refs/remotes/origin/master","hash":"f7de05a9591cb742fac1a0846229ccdbbdb3edb9","modified":1521821490000},{"_id":"themes/next/.git/objects/27/0269a51c82203124b384b586df9e2a1fb96ebe","hash":"d696204238c89398d484bff51a577f81a6ae7bdc","modified":1521821461000},{"_id":"themes/next/.git/objects/a6/afc9b54b70cf73961f91a9246adf258d0690d7","hash":"c4cb6f9d91097c92fd750ae093127c2aba5f5d4b","modified":1521821461000},{"_id":"themes/next/.git/objects/c0/3ed620d5e01d88aacf8141047d451f16afe074","hash":"6dc779a78a47615acf676ec0bf6c4bb2b2a37284","modified":1521821461000},{"_id":"themes/next/.git/objects/aa/6aa06d320739930f84eb33e671b662f9d21662","hash":"01859e044c9a3379a004db3092c52369b23cf4de","modified":1521821461000},{"_id":"themes/next/.git/objects/f7/46c5b3dfee7bc4c534e0d1168135dd3ba1e061","hash":"099535aac53ba93748a390d8ae45d21594fa6d9d","modified":1521821461000},{"_id":"themes/next/.git/objects/f4/005b57eff9695b40f0c8ede1d2126164d2ac21","hash":"4a6e752463827e29f11224f1423c1a753d28fbff","modified":1521821461000},{"_id":"themes/next/.git/objects/6c/8dbcf298e43e274febc106b30246fa22acdce1","hash":"e2a5bc1cf7122c196106b6401d31e4e3f6b903bb","modified":1521821461000},{"_id":"themes/next/.git/objects/a8/00521f1c550149f125691c4888874f26ca1db6","hash":"6c395945e7e85ada44ab5d107054807290df2ed8","modified":1521821461000},{"_id":"themes/next/.git/objects/b2/27878891991ffd85645324dade2e3f7d2d2ef6","hash":"b2b24f1c4dd79de2414a338bdf74bc983d8cf7c4","modified":1521821461000},{"_id":"themes/next/.git/objects/1c/49e835699ee2a7f8b2eae0690752ddcb4c6e72","hash":"53b1960359ef482747aa657f29f7cdbde53fdf2b","modified":1521821461000},{"_id":"public/tags/index.html","hash":"29b4d7310df9dd2aef781adc75139f5e40d837b7","modified":1521823226295},{"_id":"public/about/index.html","hash":"317e812ebf6e80653f168aed88fcd64ecd741e4d","modified":1521823226295},{"_id":"public/archives/index.html","hash":"8f1369d592bf0e6f8aca66cf42b20a2a7b98328c","modified":1521823226296},{"_id":"public/archives/2017/index.html","hash":"cb342c5a4ba5f7b2b9b131c7649694fdc9b7897d","modified":1521823226296},{"_id":"public/archives/2017/11/index.html","hash":"2957866ef9b6c81e0a3fc0848800869c4045017f","modified":1521823226296},{"_id":"public/categories/技术/index.html","hash":"60a45124c2cde225fa35498a62d9cac9c44bf3dc","modified":1521823226296},{"_id":"public/index.html","hash":"b122e7cdfd0f1ce6c1ec9b3581ec449288b688af","modified":1521823226296},{"_id":"public/tags/RN/index.html","hash":"c688fddffe8eca00a9cfa56fe9bf3c658d0b50c0","modified":1521823226296},{"_id":"public/tags/QRN/index.html","hash":"5bdc6fe6e9e87c73e7963cf1128f0ce01bc7af38","modified":1521823226296},{"_id":"public/2017/11/15/RN打包那些事儿/index.html","hash":"d9f6f3826286988c262e02222a231b33a2b60aa0","modified":1521823226296},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1521823226308},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1521823226308},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1521823226309},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1521823226309},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1521823226309},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1521823226309},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1521823226309},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1521823226309},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1521823226309},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1521823226309},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1521823226309},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1521823226309},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1521823226309},{"_id":"public/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1521823226309},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1521823226309},{"_id":"public/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1521823226309},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1521823226309},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1521823226309},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1521823226309},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1521823226309},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1521823226309},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1521823226309},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1521823226309},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1521823226310},{"_id":"public/images/logo.jpeg","hash":"981b5491284d7d82569d12bb3406b7cb6edb4690","modified":1521823226310},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1521823226876},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1521823226883},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1521823226884},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1521823226892},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1521823226892},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1521823226892},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1521823226892},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1521823226892},{"_id":"public/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1521823226892},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1521823226892},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1521823226892},{"_id":"public/vendors/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1521823226892},{"_id":"public/vendors/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1521823226892},{"_id":"public/vendors/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1521823226892},{"_id":"public/vendors/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1521823226892},{"_id":"public/vendors/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1521823226892},{"_id":"public/vendors/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1521823226893},{"_id":"public/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1521823226893},{"_id":"public/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1521823226893},{"_id":"public/vendors/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1521823226893},{"_id":"public/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1521823226893},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1521823226893},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1521823226893},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1521823226893},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1521823226893},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1521823226893},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1521823226893},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1521823226893},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1521823226893},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1521823226893},{"_id":"public/css/main.css","hash":"4f2a4496d8903027366c1bf3fe94a69a3556ba51","modified":1521823226895},{"_id":"public/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1521823226895},{"_id":"public/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1521823226895},{"_id":"public/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1521823226895},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1521823226895},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1521823226895},{"_id":"public/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1521823226895},{"_id":"public/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1521823226895},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1521823226895},{"_id":"public/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1521823226895},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1521823226895},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1521823226903}],"Category":[{"name":"大前端技术","_id":"cjf3nj5vq00013i43csk4q4j4"},{"name":"技术","_id":"cjf3njt0z00073i436y3gbzwf"}],"Data":[],"Page":[{"title":"标签","type":"tags","date":"2016-05-09T16:09:54.000Z","comments":0,"_content":"","source":"tags/index.md","raw":"title: 标签\ntype: \"tags\"\ndate: 2016-05-10 00:09:54\ncomments: false\n---\n","updated":"2018-03-23T07:31:06.000Z","path":"tags/index.html","_id":"cjf3mjwfh00001943jufk9wwb","layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"关于","date":"2016-05-09T16:09:54.000Z","comments":0,"_content":"# 关于我\n---\n\nJasonFang，小前端一枚，16年毕业，目前在北京...\n","source":"about/index.md","raw":"title: 关于\ndate: 2016-5-10 00:09:54\ncomments: false\n---\n# 关于我\n---\n\nJasonFang，小前端一枚，16年毕业，目前在北京...\n","updated":"2018-03-23T07:32:45.000Z","path":"about/index.html","_id":"cjf3mk0zn000119437a2k8ufg","layout":"page","content":"<h1 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h1><hr>\n<p>JasonFang，小前端一枚，16年毕业，目前在北京…</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h1><hr>\n<p>JasonFang，小前端一枚，16年毕业，目前在北京…</p>\n"}],"Post":[{"title":"RN 打包那些事儿","date":"2017-11-14T16:00:00.000Z","photos":["https://ws1.sinaimg.cn/large/c4b5f11bly1flggag4y6fj20du06vt9r.jpg"],"_content":"[React Native](https://github.com/facebook/react-native/tree/v0.48.1) （以下简称 RN）是 Facebook 开源的一款跨平台移动端开发框架，它与 Hybrid 方案相比，性能更好，拥有更流畅的用户体验，而与原生客户端开发相比，开发成本低，效率高，能够快速进行版本迭代和产品上线。我们从16年3月份开始在公司大范围使用 [QRN](https://ued.qunar.com/qrn/)（基于 RN 进行深度定制的移动开发框架），截至目前已有四十多个项目接入，我们在 RN 开发方面有着大量的踩坑经验，本文以 RN 打包作为切入点，分享一下 RN 官方在打包方面做了哪些处理，以及 QRN 在打包上进行了怎样的定制。\n<!-- more -->\n\n![rn-metro-bundler](https://ws1.sinaimg.cn/large/c4b5f11bly1flggag4y6fj20du06vt9r.jpg)\n\n## RN 打包\n官方 RN 打包，基于一款 node 命令行工具 react-native-cli，通过执行 `bundle` 命令，将项目所有的的 js 文件打包成一个 bundle 文件，例如：\n\n```\nreact-native bundle --entry-file index.js --platform ios --dev false --bundle-output ./index.ios.bundle --sourcemap-output ./index.ios.map --assets-dest ./asserts\n```\n\niOS 通过 `NSBundle URLForResource` 方法加载，Android 通过 `loadScriptFromString` 加载 bundle 文件。RN 打包简而言之可以理解为对项目的所有模块（RN 认为一切皆模块，包括 js、json 和图片等）进行拆包、去重过滤、代码转化、重组成新的 bundle 的过程，以下笔者将会结合官方的 [metro-bundler](https://github.com/facebook/metro-bundler/tree/2a64bd390e1d546bf62e1437b8a8aa8a839990a2) 工具来一探打包的奥妙。\n\n![总体流程](https://ws1.sinaimg.cn/large/c4b5f11bly1flhfzogn2mj20ac0bhjrp.jpg)\n\n### 命令\n在分析官方打包的具体实现前，可以先从命令行入手，来提前了解下官方打包，通过指定参数来进行打包，以下主要介绍 `entry-file、platform、dev、bundle-output、sourcemap-output` 等几个重要的参数：\n\n+ **entry-file**：即入口文件，打包时以该文件作为入口，一步步进行模块分析处理。\n+ **platform**：用于区分打包什么平台的 bundle\n+ **dev**：用于区分 bundle 使用环境，非 dev 时，会对代码进行 minified\n+ **bundle-output**：打包产物输出地址，即打包好的 bundle 存放地址\n+ **sourcemap-output**：打包时生成对应的 [sourcemap](http://www.ruanyifeng.com/blog/2013/01/javascript_source_map.html) 文件存放地址，在跟踪查找错误或崩溃时，能帮助开发快速定位到代码\n+ **assets-dest**：bundle 中使用的静态资源文件存放地址\n\n### metro-bundler\nRN 官方从 0.46.0 版本开始，出于对打包速度、可靠性和更好的可拓展性等方面的[考虑](https://github.com/facebook/react-native/issues/13976)，将 RN 的打包模块 packager 从 RN 项目中分离，重新命名为 metro-bundler。\n#### polyfill\nmetro-bundler 在进入正式拆包前，先在 js 解释器上挂载  `global.__DEV__` 变量，该变量主要用于区分打包执行环境，同时定义了模块系统函数，包括 `__d`（即 `define`）函数、`require` 函数，这样 RN 也就有了自身的模块系统。\n\n```javascript\n// metro-bundler/src/Resolver/index.js\ngetModuleSystemDependencies({dev = true}: {dev?: boolean}): Array<Module> {\n    // global.__DEV__\n    const prelude = dev\n        ? pathJoin(__dirname, 'polyfills/prelude_dev.js')\n        : pathJoin(__dirname, 'polyfills/prelude.js');\n\n    // 返回 polyfills/require.js，定义模块系统函数\n    const moduleSystem = defaults.moduleSystem;\n    return [prelude, moduleSystem].map(moduleName =>\n        // polyfill 处理\n        this._depGraph.createPolyfill({\n            file: moduleName,\n            id: moduleName,\n            dependencies: [],\n        }),\n    );\n}\n```\n最后，这两个模块会被插入到 `response.dependencies` 最前列。\n另外，RN 对部分 es6、es7 的方法 polyfill 支持，包括 Array、Object 和 Number 等，具体可以查阅 [polyfills](https://github.com/facebook/react-native/tree/v0.48.1/Libraries/polyfills) 文件，此处不再赘述，感兴趣可以自行研究。\n#### 拆包\n拆包可以理解为对依赖进行模块预处理，根据资源入口，解析其所依赖的直接模块，调用 Module 构造器解析出模块 `path、_options 和 _transformCode` 等信息，并返回这些依赖自身所依赖的模块，然后，依次以返回的这些模块作为新的资源入口，进行解析直至广度遍历所有的依赖。\n拆包具体实现是通过 `_preprocessPotentialDependencies` 方法，以指定的 `entry-file` 作为资源入口，依次解析它的依赖，并利用这些模块，依据 `filePath` 循环调用 `resolveDependency`，存入到 `ModuleCache` 实例中，最后以数组 `dependencyModules` 返回这些实例化后的 module；再次循环，从 `dependencyModules` 数组中依次取最后一个元素，递归调用 `preprocessModule` 和 `tryResolveModuleDependencies` 方法预处理所有的模块；当然，metro-bundler 设置了一个 `Set` 类型的 `visitedModulePaths` 变量进行过滤，实例化一个新的模块时，会将之添加到 `visitedModulePaths` 中，当出现已实例化过的模块，则不会再放入 `dependencyModules` 中，这避免了重复实例化同一个模块的问题。\n\n![模块拆包](https://ws1.sinaimg.cn/large/c4b5f11bly1flhln6pxygj20np0kvjt4.jpg)\n\n```javascript\n// metro-bundler/src/node-haste/DependencyGraph/ResolutionRequest.js\n_preprocessPotentialDependencies(\n    transformOptions: TransformWorkerOptions,\n    module: TModule,\n    onProgress: (moduleCount: number) => mixed,\n): void {\n    const visitedModulePaths = new Set();\n    // 此处的 module 为入口文件模块\n    const pendingBatches = [\n        this.preprocessModule(transformOptions, module, visitedModulePaths),\n    ];\n    onProgress(visitedModulePaths.size);\n    while (pendingBatches.length > 0) {\n        // dependencyModules：module（作为参数传给 preprocessModule） 依赖的子模块数组，已经过预处理过，数组元素将作为新的入口模块，预处理其子依赖\n        const dependencyModules = pendingBatches.pop();\n        while (dependencyModules.length > 0) {\n            // dependencyModule 作为新的入口模块，预处理其子依赖，通过遍历依次处理所有模块\n            const dependencyModule = dependencyModules.pop();\n            const deps = this.preprocessModule(\n                transformOptions,\n                dependencyModule,\n                visitedModulePaths,\n            );\n            // 将预处理过的模块 deps 放入 pendingBatches，达到递归调用目的\n            pendingBatches.push(deps);\n            onProgress(visitedModulePaths.size);\n        }\n    }\n}\n```\n\n#### 去重过滤\n在拆包的过程中，会发现多个模块依赖同一个模块的情况，在进行模块预处理时进行的过滤，只能避免对统一模块重复预处理，没有真正将重复的模块过滤掉，因此还需要对重复模块做去重过滤。\n去重的实现同样是以 `entry-file` 文件作为入口模块 `entry`，调用 `collectedDependencies.get` 方法，通过其中的 `collect` 函数，将 `entry` 模块的依赖拆分成 `[[depNames1, depNames2, ...], [dependencies1, dependencies2, ...]]` 形式的数组（`depNames` 和 `dependencies` 一一对应，前者为依赖名，后者为具体的预处理过的依赖）；再在 `crawlDependencies` 方法中遍历 `[dependencies1, dependencies2, ...]` 数组，将每个元素，即 `dependencyModules` 依次作为新的资源入口，递归调用 `collectedDependencies.get`，`get` 方法会将入口模块以 `{entry: collect(entry)}` 形式保存到一个 `Map` 中，在保存前会通过 `Map.has(entry)` 检查是否存在，以达到去重的目的。最后，返回 `entry-file` 模块的直接依赖。\n\n```javascript\n// metro-bundler/src/node-haste/DependencyGraph/ResolutionRequest.js\n// depNames：模块名数组，dependencies：对应模块数组\nconst crawlDependencies = (mod, [depNames, dependencies]) => {\n    const filteredPairs = [];\n\n    dependencies.forEach((modDep, i) => {\n        const name = depNames[i];\n        if (modDep == null) {\n            debug(\n                'WARNING: Cannot find required module `%s` from module `%s`',\n                name,\n                mod.path,\n            );\n            return false;\n        }\n        return filteredPairs.push([name, modDep]);\n    });\n\n    response.setResolvedDependencyPairs(mod, filteredPairs);\n    // 遍历取到所有的模块\n    const dependencyModules = filteredPairs.map(([, m]) => m);\n    // 统计 newDependencies 的长度主要用于 onProgress 显示进度，可忽略\n    const newDependencies = dependencyModules.filter(\n        m => !collectedDependencies.has(m),\n    );\n\n    if (onProgress) {\n        finishedModules += 1;\n        totalModules += newDependencies.length;\n        onProgress(\n            finishedModules,\n            Math.max(totalModules, preprocessedModuleCount),\n        );\n    }\n\n    if (recursive) { // recursive 为标志位，默认为 true\n        // doesn't block the return of this function invocation, but defers\n        // the resulution of collectionsInProgress.done.then(...)\n        // 遍历 dependencyModules，递归调用 collectedDependencies.get\n        dependencyModules.forEach(dependency =>\n            collectedDependencies.get(dependency),\n        );\n    }\n    // 返回 rootDependencies\n    return dependencyModules;\n};\n\n// metro-bundler/src/node-haste/lib/MapWithDefaults.js\nget(key: TK): TV {\n    // 去重\n    if (this.has(key)) {\n      return Map.prototype.get.call(this, key);\n    }\n    // _factory 即为 collect 方法\n    const value = this._factory(key);\n    // 保存 {entry: collect(entry)}\n    this.set(key, value);\n    return value;\n}\n```\n在上述过滤过程中，仅仅只返回了 `entry-file` 的直接模块，而其他模块只是保存在 `Map` 中，还缺少最后一步 —— 调用 `traverse` 方法依次将这些模块保存到 `response.dependencies` 中，具体实现可以查看流程图和相应代码，由于不难理解，故在此不做更细致的分析了。\n\n![去重过滤](https://ws1.sinaimg.cn/large/c4b5f11bly1flhln6q4ruj20u10i9aca.jpg)\n\n\n```javascript\nreturn Promise.all([\n        // 获取 entry-file 模块所有的直接依赖\n        collectedDependencies.get(entry),\n        collectionsInProgress.done,\n    ])\n    .then(([rootDependencies]) => {\n        return Promise.all(\n            // 遍历 collectedDependencies，获取保存的所有 dependency\n            Array.from(collectedDependencies, resolveKeyWithPromise),\n        ).then(moduleToDependenciesPairs => [\n            rootDependencies,\n            new MapWithDefaults(() => [], moduleToDependenciesPairs),\n        ]);\n    })\n    .then(([rootDependencies, moduleDependencies]) => {\n        // serialize dependencies, and make sure that every single one is only\n        // included once\n        const seen = new Set([entry]);\n        function traverse(dependencies) {\n            dependencies.forEach(dependency => {\n                // 再次去重，moduleDependencies 中包含了 rootDependencies，在 插入到 response.dependencies 前需要做这层过滤\n                if (seen.has(dependency)) {\n                    return;\n                }\n                seen.add(dependency);\n                // 依次将 dependency 插入到 response.dependencies\n                response.pushDependency(dependency);\n                // 递归调用 traverse\n                traverse(moduleDependencies.get(dependency));\n            });\n        }\n\n        traverse(rootDependencies);\n    });\n```\n#### ModuleTransport 和合并\n经过拆分、去重等处理，整个打包过程即将进入尾声 —— 将 `response.dependencies` 中的模块重新组合成一个新的 bundle。\n首先，遍历 `response.dependencies` ，对其每个 module 进行 `ModuleTransport` 处理，这里需要区分普通 module 和 asset module，因为对应的解析方法是不同的；解析 module，获取并返回 transformedModule（包括 `code、sourceCode、sourcePath、map 和 polyfill` 等）。\n此时，原材料均已准备完毕，开始进入组装阶段 `addModule`，针对 polyfill 处理过的模块调用 `definePolyfillCode` 方法进行包装，即用立即执行函数包装，polyfill 过的代码作为立即执行函数的主体；其他模块则调用 `defineModuleCode` 方法包装，即调用 `__d` 函数来定义模块，同时，将通过构建 `resolveDeps` 对象来处理其他多个模块依赖某一模块问题，在此处不过多分析，有兴趣的可以自行[探索](https://github.com/facebook/metro-bundler/blob/2a64bd390e1d546bf62e1437b8a8aa8a839990a2/packages/metro-bundler/src/Resolver/index.js#L184)。\n至此，所有的模块都已定义，将代码放在闭包中，注册到全局的 module 变量中。此时仅仅只是定义了模块，如果要让代码执行起来，最后需要一根线将所有 module 串起来，调用必要的代码 —— 通过 `finalize` 方法 require `InitializeCore` 和 `MainModule`（即 `entry-file` 资源入口）模块。当完成这一步，RN 的打包基本上就完成了。\n\n![代码转化与重组](https://ws1.sinaimg.cn/large/c4b5f11bly1flhfzog8brj20ft0dn74s.jpg)\n\n```javascript\n// metro-bundler/src/Bundler/Bundle.js\nfinalize(options: FinalizeOptions) {\n    options = options || {};\n    if (options.runModule) {\n        // 此处 require InitializeCore 模块\n        // RN 在 metro-bundler/src/defaults.js 中默认添加了 InitializeCore 模块\n        options.runBeforeMainModule.forEach(this._addRequireCall, this);\n        // require MainModule\n        this._addRequireCall(this.getMainModuleId());\n    }\n    // freeze 处理新 bundle 的 __modules 和 __assets\n    super.finalize(options);\n}\n```\n\n## QRN 打包定制化\n尽管 RN 官方的打包工具的功能比较完善了，但的确仍有些地方可以进行优化：\n\n+ 打包生成的 bundle 文件太大\n+ 对 bundle 进行拆分后，模块关系变动使得分拆后的 bundle 难以保持一致\n+ 静态资源离线\n\n\n### bundle 拆分\nmetro-bundler 在打包时，会将所有的文件，包括框架组件、业务逻辑代码，都打包到一个 bundle 中，笔者试着将一个没有任何业务逻辑代码的 AwesomeProject 项目，打包生成的 bundle 文件 size 约为 490 k。Qunar 拥有酒店、机票、旅游度假、门票和火车票等多个业务线，随着业务不断扩大、业务复杂性不断上升，生成的 bundle 文件会逐渐增大，将会使得客户端 size 的压力越来越大（虽然从 iOS 的 App Store 上使用流量下载客户端的限制从 100 M 放宽到 150 M）。\nmetro-bundler 这种打包成一个 bundle 的策略对于 Qunar 来说，必定是不能接受的。在 Hybrid 开发中，在解决文件过大问题的一个策略 —— 拆包，同样，对 RN bundle 拆分，也是适用的。metro-bundler 将项目的所有代码打包成一个 bundle，其中包括 RN 框架 js 文件和一些十分常用的第三方模块，不难发现，多个项目使用 RN 方案，生成的 bundle 文件将会包含多份一模一样的框架 js 和常用的第三方模块文件；因此，我们采取的策略是将框架代码和业务逻辑拆成两个 bundle，这样一方面解决了 bundle 文件大，代码重复问题，另一方面业务只需要将重心放在业务逻辑上，框架由我们来维护。\n\n![jsbundle](https://ws1.sinaimg.cn/large/c4b5f11bly1flggh2fumnj20gy07egly.jpg)\n\n我们在打包时先后调用两次 `bundle` 方法，通过 `bundleType` 参数进行区分框架 bundle 和业务 bundle。同时，在打包时默认不指定 `entry-file`，完全交给打包工具 QRNPackager 来处理，打框架 bundle 时默认指定一个 `platform.js` 文件，该文件 require RN 框架、QRN（包括自定义的组件和模块等），以及一些常用的第三方模块；而业务 bundle 则以项目入口文件为 `entry-file` 进行打包，当然仅仅是这样还不行，我们在 metro-bundler 拆包、去重过滤完成时，对 `response.dependencies` 再处理，通过 `platformDependencies`, `bizDependencies` 两个配置项，分别生成新的 `response.dependencies`。然后执行 metro-bundler 的后续流程。\n\n### 以实际路径代替 module ID 进行引用\nmetro-bundler 打包处理模块时，以递增的方式给每个模块一个 module ID，使得文件直接通过 `require(module ID)` 的方式引用其他模块；当然，一个项目的所有模块都在一个 bundle 中是没问题的，但进行 bundle 拆分后，当框架新增或删除一个依赖时，因为模块编号的方式使得在该状况下，后续的模块的 module ID 将会错位，这将造成升级框架 bundle 的难度，每次升级，其他业务 bundle 相应的需要回归测试，加大了开发测试成本。我们的选择是直接舍弃 module ID 的引用方式，直接使用模块路径进行引用，这样无论怎么增减模块，都不会出现模块引用错误的问题，做法也比较简单，重写了 `resolutionResponse.getModuleId` 方法，虽然会增大一点 bundle 的 size。\n\n### 静态资源离线\n项目开发中少不了使用图片、字体等离线资源的使用，如果这些静态文件直接内置到本地，一方面不方便管理，另一方面也会增大 size 的压力。因此，一般采取的策略是将静态资源上传到服务器，但这也会导致其他问题 —— 用户流量消耗，增加请求，加载资源变慢影响性能。\n针对种种问题，我们采取的策略是将开发时将资源上传到服务器，代码中直接通过 url 地址获取资源，同时对打包工具进行了改造，通过不同的配置文件记录项目使用的图片和字体等资源的 url 地址，打包时将之写入到 `staticAssets.json` 文件；另外客户端也进行相应的处理，第一次加载 bundle 时，会进行资源离线处理。当客户端加载静态资源时，请求会被拦截器拦截，优先使用本地的离线静态资源，如果本地没有对应资源，才会去服务器上获取。\n\n## 写在最后\n笔者近期在升级 RN 的同时较系统地阅读了 metro-bundler 源码，结合自身的理解整理成该篇文章，希望对想要了解 RN 打包或正在解决 RN 打包问题的朋友有一点帮助。如果行文中有错误，敬请斧正。\n","source":"_posts/RN打包那些事儿.md","raw":"title: RN 打包那些事儿\ndate: 2017-11-15\ncategory: 技术\ntags: [RN, QRN]\nphotos: [https://ws1.sinaimg.cn/large/c4b5f11bly1flggag4y6fj20du06vt9r.jpg]\n---\n[React Native](https://github.com/facebook/react-native/tree/v0.48.1) （以下简称 RN）是 Facebook 开源的一款跨平台移动端开发框架，它与 Hybrid 方案相比，性能更好，拥有更流畅的用户体验，而与原生客户端开发相比，开发成本低，效率高，能够快速进行版本迭代和产品上线。我们从16年3月份开始在公司大范围使用 [QRN](https://ued.qunar.com/qrn/)（基于 RN 进行深度定制的移动开发框架），截至目前已有四十多个项目接入，我们在 RN 开发方面有着大量的踩坑经验，本文以 RN 打包作为切入点，分享一下 RN 官方在打包方面做了哪些处理，以及 QRN 在打包上进行了怎样的定制。\n<!-- more -->\n\n![rn-metro-bundler](https://ws1.sinaimg.cn/large/c4b5f11bly1flggag4y6fj20du06vt9r.jpg)\n\n## RN 打包\n官方 RN 打包，基于一款 node 命令行工具 react-native-cli，通过执行 `bundle` 命令，将项目所有的的 js 文件打包成一个 bundle 文件，例如：\n\n```\nreact-native bundle --entry-file index.js --platform ios --dev false --bundle-output ./index.ios.bundle --sourcemap-output ./index.ios.map --assets-dest ./asserts\n```\n\niOS 通过 `NSBundle URLForResource` 方法加载，Android 通过 `loadScriptFromString` 加载 bundle 文件。RN 打包简而言之可以理解为对项目的所有模块（RN 认为一切皆模块，包括 js、json 和图片等）进行拆包、去重过滤、代码转化、重组成新的 bundle 的过程，以下笔者将会结合官方的 [metro-bundler](https://github.com/facebook/metro-bundler/tree/2a64bd390e1d546bf62e1437b8a8aa8a839990a2) 工具来一探打包的奥妙。\n\n![总体流程](https://ws1.sinaimg.cn/large/c4b5f11bly1flhfzogn2mj20ac0bhjrp.jpg)\n\n### 命令\n在分析官方打包的具体实现前，可以先从命令行入手，来提前了解下官方打包，通过指定参数来进行打包，以下主要介绍 `entry-file、platform、dev、bundle-output、sourcemap-output` 等几个重要的参数：\n\n+ **entry-file**：即入口文件，打包时以该文件作为入口，一步步进行模块分析处理。\n+ **platform**：用于区分打包什么平台的 bundle\n+ **dev**：用于区分 bundle 使用环境，非 dev 时，会对代码进行 minified\n+ **bundle-output**：打包产物输出地址，即打包好的 bundle 存放地址\n+ **sourcemap-output**：打包时生成对应的 [sourcemap](http://www.ruanyifeng.com/blog/2013/01/javascript_source_map.html) 文件存放地址，在跟踪查找错误或崩溃时，能帮助开发快速定位到代码\n+ **assets-dest**：bundle 中使用的静态资源文件存放地址\n\n### metro-bundler\nRN 官方从 0.46.0 版本开始，出于对打包速度、可靠性和更好的可拓展性等方面的[考虑](https://github.com/facebook/react-native/issues/13976)，将 RN 的打包模块 packager 从 RN 项目中分离，重新命名为 metro-bundler。\n#### polyfill\nmetro-bundler 在进入正式拆包前，先在 js 解释器上挂载  `global.__DEV__` 变量，该变量主要用于区分打包执行环境，同时定义了模块系统函数，包括 `__d`（即 `define`）函数、`require` 函数，这样 RN 也就有了自身的模块系统。\n\n```javascript\n// metro-bundler/src/Resolver/index.js\ngetModuleSystemDependencies({dev = true}: {dev?: boolean}): Array<Module> {\n    // global.__DEV__\n    const prelude = dev\n        ? pathJoin(__dirname, 'polyfills/prelude_dev.js')\n        : pathJoin(__dirname, 'polyfills/prelude.js');\n\n    // 返回 polyfills/require.js，定义模块系统函数\n    const moduleSystem = defaults.moduleSystem;\n    return [prelude, moduleSystem].map(moduleName =>\n        // polyfill 处理\n        this._depGraph.createPolyfill({\n            file: moduleName,\n            id: moduleName,\n            dependencies: [],\n        }),\n    );\n}\n```\n最后，这两个模块会被插入到 `response.dependencies` 最前列。\n另外，RN 对部分 es6、es7 的方法 polyfill 支持，包括 Array、Object 和 Number 等，具体可以查阅 [polyfills](https://github.com/facebook/react-native/tree/v0.48.1/Libraries/polyfills) 文件，此处不再赘述，感兴趣可以自行研究。\n#### 拆包\n拆包可以理解为对依赖进行模块预处理，根据资源入口，解析其所依赖的直接模块，调用 Module 构造器解析出模块 `path、_options 和 _transformCode` 等信息，并返回这些依赖自身所依赖的模块，然后，依次以返回的这些模块作为新的资源入口，进行解析直至广度遍历所有的依赖。\n拆包具体实现是通过 `_preprocessPotentialDependencies` 方法，以指定的 `entry-file` 作为资源入口，依次解析它的依赖，并利用这些模块，依据 `filePath` 循环调用 `resolveDependency`，存入到 `ModuleCache` 实例中，最后以数组 `dependencyModules` 返回这些实例化后的 module；再次循环，从 `dependencyModules` 数组中依次取最后一个元素，递归调用 `preprocessModule` 和 `tryResolveModuleDependencies` 方法预处理所有的模块；当然，metro-bundler 设置了一个 `Set` 类型的 `visitedModulePaths` 变量进行过滤，实例化一个新的模块时，会将之添加到 `visitedModulePaths` 中，当出现已实例化过的模块，则不会再放入 `dependencyModules` 中，这避免了重复实例化同一个模块的问题。\n\n![模块拆包](https://ws1.sinaimg.cn/large/c4b5f11bly1flhln6pxygj20np0kvjt4.jpg)\n\n```javascript\n// metro-bundler/src/node-haste/DependencyGraph/ResolutionRequest.js\n_preprocessPotentialDependencies(\n    transformOptions: TransformWorkerOptions,\n    module: TModule,\n    onProgress: (moduleCount: number) => mixed,\n): void {\n    const visitedModulePaths = new Set();\n    // 此处的 module 为入口文件模块\n    const pendingBatches = [\n        this.preprocessModule(transformOptions, module, visitedModulePaths),\n    ];\n    onProgress(visitedModulePaths.size);\n    while (pendingBatches.length > 0) {\n        // dependencyModules：module（作为参数传给 preprocessModule） 依赖的子模块数组，已经过预处理过，数组元素将作为新的入口模块，预处理其子依赖\n        const dependencyModules = pendingBatches.pop();\n        while (dependencyModules.length > 0) {\n            // dependencyModule 作为新的入口模块，预处理其子依赖，通过遍历依次处理所有模块\n            const dependencyModule = dependencyModules.pop();\n            const deps = this.preprocessModule(\n                transformOptions,\n                dependencyModule,\n                visitedModulePaths,\n            );\n            // 将预处理过的模块 deps 放入 pendingBatches，达到递归调用目的\n            pendingBatches.push(deps);\n            onProgress(visitedModulePaths.size);\n        }\n    }\n}\n```\n\n#### 去重过滤\n在拆包的过程中，会发现多个模块依赖同一个模块的情况，在进行模块预处理时进行的过滤，只能避免对统一模块重复预处理，没有真正将重复的模块过滤掉，因此还需要对重复模块做去重过滤。\n去重的实现同样是以 `entry-file` 文件作为入口模块 `entry`，调用 `collectedDependencies.get` 方法，通过其中的 `collect` 函数，将 `entry` 模块的依赖拆分成 `[[depNames1, depNames2, ...], [dependencies1, dependencies2, ...]]` 形式的数组（`depNames` 和 `dependencies` 一一对应，前者为依赖名，后者为具体的预处理过的依赖）；再在 `crawlDependencies` 方法中遍历 `[dependencies1, dependencies2, ...]` 数组，将每个元素，即 `dependencyModules` 依次作为新的资源入口，递归调用 `collectedDependencies.get`，`get` 方法会将入口模块以 `{entry: collect(entry)}` 形式保存到一个 `Map` 中，在保存前会通过 `Map.has(entry)` 检查是否存在，以达到去重的目的。最后，返回 `entry-file` 模块的直接依赖。\n\n```javascript\n// metro-bundler/src/node-haste/DependencyGraph/ResolutionRequest.js\n// depNames：模块名数组，dependencies：对应模块数组\nconst crawlDependencies = (mod, [depNames, dependencies]) => {\n    const filteredPairs = [];\n\n    dependencies.forEach((modDep, i) => {\n        const name = depNames[i];\n        if (modDep == null) {\n            debug(\n                'WARNING: Cannot find required module `%s` from module `%s`',\n                name,\n                mod.path,\n            );\n            return false;\n        }\n        return filteredPairs.push([name, modDep]);\n    });\n\n    response.setResolvedDependencyPairs(mod, filteredPairs);\n    // 遍历取到所有的模块\n    const dependencyModules = filteredPairs.map(([, m]) => m);\n    // 统计 newDependencies 的长度主要用于 onProgress 显示进度，可忽略\n    const newDependencies = dependencyModules.filter(\n        m => !collectedDependencies.has(m),\n    );\n\n    if (onProgress) {\n        finishedModules += 1;\n        totalModules += newDependencies.length;\n        onProgress(\n            finishedModules,\n            Math.max(totalModules, preprocessedModuleCount),\n        );\n    }\n\n    if (recursive) { // recursive 为标志位，默认为 true\n        // doesn't block the return of this function invocation, but defers\n        // the resulution of collectionsInProgress.done.then(...)\n        // 遍历 dependencyModules，递归调用 collectedDependencies.get\n        dependencyModules.forEach(dependency =>\n            collectedDependencies.get(dependency),\n        );\n    }\n    // 返回 rootDependencies\n    return dependencyModules;\n};\n\n// metro-bundler/src/node-haste/lib/MapWithDefaults.js\nget(key: TK): TV {\n    // 去重\n    if (this.has(key)) {\n      return Map.prototype.get.call(this, key);\n    }\n    // _factory 即为 collect 方法\n    const value = this._factory(key);\n    // 保存 {entry: collect(entry)}\n    this.set(key, value);\n    return value;\n}\n```\n在上述过滤过程中，仅仅只返回了 `entry-file` 的直接模块，而其他模块只是保存在 `Map` 中，还缺少最后一步 —— 调用 `traverse` 方法依次将这些模块保存到 `response.dependencies` 中，具体实现可以查看流程图和相应代码，由于不难理解，故在此不做更细致的分析了。\n\n![去重过滤](https://ws1.sinaimg.cn/large/c4b5f11bly1flhln6q4ruj20u10i9aca.jpg)\n\n\n```javascript\nreturn Promise.all([\n        // 获取 entry-file 模块所有的直接依赖\n        collectedDependencies.get(entry),\n        collectionsInProgress.done,\n    ])\n    .then(([rootDependencies]) => {\n        return Promise.all(\n            // 遍历 collectedDependencies，获取保存的所有 dependency\n            Array.from(collectedDependencies, resolveKeyWithPromise),\n        ).then(moduleToDependenciesPairs => [\n            rootDependencies,\n            new MapWithDefaults(() => [], moduleToDependenciesPairs),\n        ]);\n    })\n    .then(([rootDependencies, moduleDependencies]) => {\n        // serialize dependencies, and make sure that every single one is only\n        // included once\n        const seen = new Set([entry]);\n        function traverse(dependencies) {\n            dependencies.forEach(dependency => {\n                // 再次去重，moduleDependencies 中包含了 rootDependencies，在 插入到 response.dependencies 前需要做这层过滤\n                if (seen.has(dependency)) {\n                    return;\n                }\n                seen.add(dependency);\n                // 依次将 dependency 插入到 response.dependencies\n                response.pushDependency(dependency);\n                // 递归调用 traverse\n                traverse(moduleDependencies.get(dependency));\n            });\n        }\n\n        traverse(rootDependencies);\n    });\n```\n#### ModuleTransport 和合并\n经过拆分、去重等处理，整个打包过程即将进入尾声 —— 将 `response.dependencies` 中的模块重新组合成一个新的 bundle。\n首先，遍历 `response.dependencies` ，对其每个 module 进行 `ModuleTransport` 处理，这里需要区分普通 module 和 asset module，因为对应的解析方法是不同的；解析 module，获取并返回 transformedModule（包括 `code、sourceCode、sourcePath、map 和 polyfill` 等）。\n此时，原材料均已准备完毕，开始进入组装阶段 `addModule`，针对 polyfill 处理过的模块调用 `definePolyfillCode` 方法进行包装，即用立即执行函数包装，polyfill 过的代码作为立即执行函数的主体；其他模块则调用 `defineModuleCode` 方法包装，即调用 `__d` 函数来定义模块，同时，将通过构建 `resolveDeps` 对象来处理其他多个模块依赖某一模块问题，在此处不过多分析，有兴趣的可以自行[探索](https://github.com/facebook/metro-bundler/blob/2a64bd390e1d546bf62e1437b8a8aa8a839990a2/packages/metro-bundler/src/Resolver/index.js#L184)。\n至此，所有的模块都已定义，将代码放在闭包中，注册到全局的 module 变量中。此时仅仅只是定义了模块，如果要让代码执行起来，最后需要一根线将所有 module 串起来，调用必要的代码 —— 通过 `finalize` 方法 require `InitializeCore` 和 `MainModule`（即 `entry-file` 资源入口）模块。当完成这一步，RN 的打包基本上就完成了。\n\n![代码转化与重组](https://ws1.sinaimg.cn/large/c4b5f11bly1flhfzog8brj20ft0dn74s.jpg)\n\n```javascript\n// metro-bundler/src/Bundler/Bundle.js\nfinalize(options: FinalizeOptions) {\n    options = options || {};\n    if (options.runModule) {\n        // 此处 require InitializeCore 模块\n        // RN 在 metro-bundler/src/defaults.js 中默认添加了 InitializeCore 模块\n        options.runBeforeMainModule.forEach(this._addRequireCall, this);\n        // require MainModule\n        this._addRequireCall(this.getMainModuleId());\n    }\n    // freeze 处理新 bundle 的 __modules 和 __assets\n    super.finalize(options);\n}\n```\n\n## QRN 打包定制化\n尽管 RN 官方的打包工具的功能比较完善了，但的确仍有些地方可以进行优化：\n\n+ 打包生成的 bundle 文件太大\n+ 对 bundle 进行拆分后，模块关系变动使得分拆后的 bundle 难以保持一致\n+ 静态资源离线\n\n\n### bundle 拆分\nmetro-bundler 在打包时，会将所有的文件，包括框架组件、业务逻辑代码，都打包到一个 bundle 中，笔者试着将一个没有任何业务逻辑代码的 AwesomeProject 项目，打包生成的 bundle 文件 size 约为 490 k。Qunar 拥有酒店、机票、旅游度假、门票和火车票等多个业务线，随着业务不断扩大、业务复杂性不断上升，生成的 bundle 文件会逐渐增大，将会使得客户端 size 的压力越来越大（虽然从 iOS 的 App Store 上使用流量下载客户端的限制从 100 M 放宽到 150 M）。\nmetro-bundler 这种打包成一个 bundle 的策略对于 Qunar 来说，必定是不能接受的。在 Hybrid 开发中，在解决文件过大问题的一个策略 —— 拆包，同样，对 RN bundle 拆分，也是适用的。metro-bundler 将项目的所有代码打包成一个 bundle，其中包括 RN 框架 js 文件和一些十分常用的第三方模块，不难发现，多个项目使用 RN 方案，生成的 bundle 文件将会包含多份一模一样的框架 js 和常用的第三方模块文件；因此，我们采取的策略是将框架代码和业务逻辑拆成两个 bundle，这样一方面解决了 bundle 文件大，代码重复问题，另一方面业务只需要将重心放在业务逻辑上，框架由我们来维护。\n\n![jsbundle](https://ws1.sinaimg.cn/large/c4b5f11bly1flggh2fumnj20gy07egly.jpg)\n\n我们在打包时先后调用两次 `bundle` 方法，通过 `bundleType` 参数进行区分框架 bundle 和业务 bundle。同时，在打包时默认不指定 `entry-file`，完全交给打包工具 QRNPackager 来处理，打框架 bundle 时默认指定一个 `platform.js` 文件，该文件 require RN 框架、QRN（包括自定义的组件和模块等），以及一些常用的第三方模块；而业务 bundle 则以项目入口文件为 `entry-file` 进行打包，当然仅仅是这样还不行，我们在 metro-bundler 拆包、去重过滤完成时，对 `response.dependencies` 再处理，通过 `platformDependencies`, `bizDependencies` 两个配置项，分别生成新的 `response.dependencies`。然后执行 metro-bundler 的后续流程。\n\n### 以实际路径代替 module ID 进行引用\nmetro-bundler 打包处理模块时，以递增的方式给每个模块一个 module ID，使得文件直接通过 `require(module ID)` 的方式引用其他模块；当然，一个项目的所有模块都在一个 bundle 中是没问题的，但进行 bundle 拆分后，当框架新增或删除一个依赖时，因为模块编号的方式使得在该状况下，后续的模块的 module ID 将会错位，这将造成升级框架 bundle 的难度，每次升级，其他业务 bundle 相应的需要回归测试，加大了开发测试成本。我们的选择是直接舍弃 module ID 的引用方式，直接使用模块路径进行引用，这样无论怎么增减模块，都不会出现模块引用错误的问题，做法也比较简单，重写了 `resolutionResponse.getModuleId` 方法，虽然会增大一点 bundle 的 size。\n\n### 静态资源离线\n项目开发中少不了使用图片、字体等离线资源的使用，如果这些静态文件直接内置到本地，一方面不方便管理，另一方面也会增大 size 的压力。因此，一般采取的策略是将静态资源上传到服务器，但这也会导致其他问题 —— 用户流量消耗，增加请求，加载资源变慢影响性能。\n针对种种问题，我们采取的策略是将开发时将资源上传到服务器，代码中直接通过 url 地址获取资源，同时对打包工具进行了改造，通过不同的配置文件记录项目使用的图片和字体等资源的 url 地址，打包时将之写入到 `staticAssets.json` 文件；另外客户端也进行相应的处理，第一次加载 bundle 时，会进行资源离线处理。当客户端加载静态资源时，请求会被拦截器拦截，优先使用本地的离线静态资源，如果本地没有对应资源，才会去服务器上获取。\n\n## 写在最后\n笔者近期在升级 RN 的同时较系统地阅读了 metro-bundler 源码，结合自身的理解整理成该篇文章，希望对想要了解 RN 打包或正在解决 RN 打包问题的朋友有一点帮助。如果行文中有错误，敬请斧正。\n","slug":"RN打包那些事儿","published":1,"updated":"2018-03-23T16:11:57.000Z","_id":"cjf3nkt4500093i433l57l298","comments":1,"layout":"post","link":"","content":"<p><a href=\"https://github.com/facebook/react-native/tree/v0.48.1\" target=\"_blank\" rel=\"noopener\">React Native</a> （以下简称 RN）是 Facebook 开源的一款跨平台移动端开发框架，它与 Hybrid 方案相比，性能更好，拥有更流畅的用户体验，而与原生客户端开发相比，开发成本低，效率高，能够快速进行版本迭代和产品上线。我们从16年3月份开始在公司大范围使用 <a href=\"https://ued.qunar.com/qrn/\" target=\"_blank\" rel=\"noopener\">QRN</a>（基于 RN 进行深度定制的移动开发框架），截至目前已有四十多个项目接入，我们在 RN 开发方面有着大量的踩坑经验，本文以 RN 打包作为切入点，分享一下 RN 官方在打包方面做了哪些处理，以及 QRN 在打包上进行了怎样的定制。<br><a id=\"more\"></a></p>\n<p><img src=\"https://ws1.sinaimg.cn/large/c4b5f11bly1flggag4y6fj20du06vt9r.jpg\" alt=\"rn-metro-bundler\"></p>\n<h2 id=\"RN-打包\"><a href=\"#RN-打包\" class=\"headerlink\" title=\"RN 打包\"></a>RN 打包</h2><p>官方 RN 打包，基于一款 node 命令行工具 react-native-cli，通过执行 <code>bundle</code> 命令，将项目所有的的 js 文件打包成一个 bundle 文件，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">react-native bundle --entry-file index.js --platform ios --dev false --bundle-output ./index.ios.bundle --sourcemap-output ./index.ios.map --assets-dest ./asserts</span><br></pre></td></tr></table></figure>\n<p>iOS 通过 <code>NSBundle URLForResource</code> 方法加载，Android 通过 <code>loadScriptFromString</code> 加载 bundle 文件。RN 打包简而言之可以理解为对项目的所有模块（RN 认为一切皆模块，包括 js、json 和图片等）进行拆包、去重过滤、代码转化、重组成新的 bundle 的过程，以下笔者将会结合官方的 <a href=\"https://github.com/facebook/metro-bundler/tree/2a64bd390e1d546bf62e1437b8a8aa8a839990a2\" target=\"_blank\" rel=\"noopener\">metro-bundler</a> 工具来一探打包的奥妙。</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/c4b5f11bly1flhfzogn2mj20ac0bhjrp.jpg\" alt=\"总体流程\"></p>\n<h3 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h3><p>在分析官方打包的具体实现前，可以先从命令行入手，来提前了解下官方打包，通过指定参数来进行打包，以下主要介绍 <code>entry-file、platform、dev、bundle-output、sourcemap-output</code> 等几个重要的参数：</p>\n<ul>\n<li><strong>entry-file</strong>：即入口文件，打包时以该文件作为入口，一步步进行模块分析处理。</li>\n<li><strong>platform</strong>：用于区分打包什么平台的 bundle</li>\n<li><strong>dev</strong>：用于区分 bundle 使用环境，非 dev 时，会对代码进行 minified</li>\n<li><strong>bundle-output</strong>：打包产物输出地址，即打包好的 bundle 存放地址</li>\n<li><strong>sourcemap-output</strong>：打包时生成对应的 <a href=\"http://www.ruanyifeng.com/blog/2013/01/javascript_source_map.html\" target=\"_blank\" rel=\"noopener\">sourcemap</a> 文件存放地址，在跟踪查找错误或崩溃时，能帮助开发快速定位到代码</li>\n<li><strong>assets-dest</strong>：bundle 中使用的静态资源文件存放地址</li>\n</ul>\n<h3 id=\"metro-bundler\"><a href=\"#metro-bundler\" class=\"headerlink\" title=\"metro-bundler\"></a>metro-bundler</h3><p>RN 官方从 0.46.0 版本开始，出于对打包速度、可靠性和更好的可拓展性等方面的<a href=\"https://github.com/facebook/react-native/issues/13976\" target=\"_blank\" rel=\"noopener\">考虑</a>，将 RN 的打包模块 packager 从 RN 项目中分离，重新命名为 metro-bundler。</p>\n<h4 id=\"polyfill\"><a href=\"#polyfill\" class=\"headerlink\" title=\"polyfill\"></a>polyfill</h4><p>metro-bundler 在进入正式拆包前，先在 js 解释器上挂载  <code>global.__DEV__</code> 变量，该变量主要用于区分打包执行环境，同时定义了模块系统函数，包括 <code>__d</code>（即 <code>define</code>）函数、<code>require</code> 函数，这样 RN 也就有了自身的模块系统。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// metro-bundler/src/Resolver/index.js</span></span><br><span class=\"line\">getModuleSystemDependencies(&#123;dev = <span class=\"literal\">true</span>&#125;: &#123;dev?: boolean&#125;): <span class=\"built_in\">Array</span>&lt;Module&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// global.__DEV__</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> prelude = dev</span><br><span class=\"line\">        ? pathJoin(__dirname, <span class=\"string\">'polyfills/prelude_dev.js'</span>)</span><br><span class=\"line\">        : pathJoin(__dirname, <span class=\"string\">'polyfills/prelude.js'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回 polyfills/require.js，定义模块系统函数</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> moduleSystem = defaults.moduleSystem;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [prelude, moduleSystem].map(<span class=\"function\"><span class=\"params\">moduleName</span> =&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">// polyfill 处理</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>._depGraph.createPolyfill(&#123;</span><br><span class=\"line\">            file: moduleName,</span><br><span class=\"line\">            id: moduleName,</span><br><span class=\"line\">            dependencies: [],</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后，这两个模块会被插入到 <code>response.dependencies</code> 最前列。<br>另外，RN 对部分 es6、es7 的方法 polyfill 支持，包括 Array、Object 和 Number 等，具体可以查阅 <a href=\"https://github.com/facebook/react-native/tree/v0.48.1/Libraries/polyfills\" target=\"_blank\" rel=\"noopener\">polyfills</a> 文件，此处不再赘述，感兴趣可以自行研究。</p>\n<h4 id=\"拆包\"><a href=\"#拆包\" class=\"headerlink\" title=\"拆包\"></a>拆包</h4><p>拆包可以理解为对依赖进行模块预处理，根据资源入口，解析其所依赖的直接模块，调用 Module 构造器解析出模块 <code>path、_options 和 _transformCode</code> 等信息，并返回这些依赖自身所依赖的模块，然后，依次以返回的这些模块作为新的资源入口，进行解析直至广度遍历所有的依赖。<br>拆包具体实现是通过 <code>_preprocessPotentialDependencies</code> 方法，以指定的 <code>entry-file</code> 作为资源入口，依次解析它的依赖，并利用这些模块，依据 <code>filePath</code> 循环调用 <code>resolveDependency</code>，存入到 <code>ModuleCache</code> 实例中，最后以数组 <code>dependencyModules</code> 返回这些实例化后的 module；再次循环，从 <code>dependencyModules</code> 数组中依次取最后一个元素，递归调用 <code>preprocessModule</code> 和 <code>tryResolveModuleDependencies</code> 方法预处理所有的模块；当然，metro-bundler 设置了一个 <code>Set</code> 类型的 <code>visitedModulePaths</code> 变量进行过滤，实例化一个新的模块时，会将之添加到 <code>visitedModulePaths</code> 中，当出现已实例化过的模块，则不会再放入 <code>dependencyModules</code> 中，这避免了重复实例化同一个模块的问题。</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/c4b5f11bly1flhln6pxygj20np0kvjt4.jpg\" alt=\"模块拆包\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// metro-bundler/src/node-haste/DependencyGraph/ResolutionRequest.js</span></span><br><span class=\"line\">_preprocessPotentialDependencies(</span><br><span class=\"line\">    transformOptions: TransformWorkerOptions,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: TModule,</span><br><span class=\"line\">    onProgress: <span class=\"function\">(<span class=\"params\">moduleCount: number</span>) =&gt;</span> mixed,</span><br><span class=\"line\">): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> visitedModulePaths = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 此处的 module 为入口文件模块</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> pendingBatches = [</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.preprocessModule(transformOptions, <span class=\"built_in\">module</span>, visitedModulePaths),</span><br><span class=\"line\">    ];</span><br><span class=\"line\">    onProgress(visitedModulePaths.size);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (pendingBatches.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// dependencyModules：module（作为参数传给 preprocessModule） 依赖的子模块数组，已经过预处理过，数组元素将作为新的入口模块，预处理其子依赖</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> dependencyModules = pendingBatches.pop();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (dependencyModules.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// dependencyModule 作为新的入口模块，预处理其子依赖，通过遍历依次处理所有模块</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> dependencyModule = dependencyModules.pop();</span><br><span class=\"line\">            <span class=\"keyword\">const</span> deps = <span class=\"keyword\">this</span>.preprocessModule(</span><br><span class=\"line\">                transformOptions,</span><br><span class=\"line\">                dependencyModule,</span><br><span class=\"line\">                visitedModulePaths,</span><br><span class=\"line\">            );</span><br><span class=\"line\">            <span class=\"comment\">// 将预处理过的模块 deps 放入 pendingBatches，达到递归调用目的</span></span><br><span class=\"line\">            pendingBatches.push(deps);</span><br><span class=\"line\">            onProgress(visitedModulePaths.size);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"去重过滤\"><a href=\"#去重过滤\" class=\"headerlink\" title=\"去重过滤\"></a>去重过滤</h4><p>在拆包的过程中，会发现多个模块依赖同一个模块的情况，在进行模块预处理时进行的过滤，只能避免对统一模块重复预处理，没有真正将重复的模块过滤掉，因此还需要对重复模块做去重过滤。<br>去重的实现同样是以 <code>entry-file</code> 文件作为入口模块 <code>entry</code>，调用 <code>collectedDependencies.get</code> 方法，通过其中的 <code>collect</code> 函数，将 <code>entry</code> 模块的依赖拆分成 <code>[[depNames1, depNames2, ...], [dependencies1, dependencies2, ...]]</code> 形式的数组（<code>depNames</code> 和 <code>dependencies</code> 一一对应，前者为依赖名，后者为具体的预处理过的依赖）；再在 <code>crawlDependencies</code> 方法中遍历 <code>[dependencies1, dependencies2, ...]</code> 数组，将每个元素，即 <code>dependencyModules</code> 依次作为新的资源入口，递归调用 <code>collectedDependencies.get</code>，<code>get</code> 方法会将入口模块以 <code>{entry: collect(entry)}</code> 形式保存到一个 <code>Map</code> 中，在保存前会通过 <code>Map.has(entry)</code> 检查是否存在，以达到去重的目的。最后，返回 <code>entry-file</code> 模块的直接依赖。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// metro-bundler/src/node-haste/DependencyGraph/ResolutionRequest.js</span></span><br><span class=\"line\"><span class=\"comment\">// depNames：模块名数组，dependencies：对应模块数组</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> crawlDependencies = <span class=\"function\">(<span class=\"params\">mod, [depNames, dependencies]</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> filteredPairs = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    dependencies.forEach(<span class=\"function\">(<span class=\"params\">modDep, i</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> name = depNames[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (modDep == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            debug(</span><br><span class=\"line\">                <span class=\"string\">'WARNING: Cannot find required module `%s` from module `%s`'</span>,</span><br><span class=\"line\">                name,</span><br><span class=\"line\">                mod.path,</span><br><span class=\"line\">            );</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> filteredPairs.push([name, modDep]);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    response.setResolvedDependencyPairs(mod, filteredPairs);</span><br><span class=\"line\">    <span class=\"comment\">// 遍历取到所有的模块</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> dependencyModules = filteredPairs.map(<span class=\"function\">(<span class=\"params\">[, m]</span>) =&gt;</span> m);</span><br><span class=\"line\">    <span class=\"comment\">// 统计 newDependencies 的长度主要用于 onProgress 显示进度，可忽略</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> newDependencies = dependencyModules.filter(</span><br><span class=\"line\">        m =&gt; !collectedDependencies.has(m),</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (onProgress) &#123;</span><br><span class=\"line\">        finishedModules += <span class=\"number\">1</span>;</span><br><span class=\"line\">        totalModules += newDependencies.length;</span><br><span class=\"line\">        onProgress(</span><br><span class=\"line\">            finishedModules,</span><br><span class=\"line\">            <span class=\"built_in\">Math</span>.max(totalModules, preprocessedModuleCount),</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (recursive) &#123; <span class=\"comment\">// recursive 为标志位，默认为 true</span></span><br><span class=\"line\">        <span class=\"comment\">// doesn't block the return of this function invocation, but defers</span></span><br><span class=\"line\">        <span class=\"comment\">// the resulution of collectionsInProgress.done.then(...)</span></span><br><span class=\"line\">        <span class=\"comment\">// 遍历 dependencyModules，递归调用 collectedDependencies.get</span></span><br><span class=\"line\">        dependencyModules.forEach(<span class=\"function\"><span class=\"params\">dependency</span> =&gt;</span></span><br><span class=\"line\">            collectedDependencies.get(dependency),</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 返回 rootDependencies</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> dependencyModules;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// metro-bundler/src/node-haste/lib/MapWithDefaults.js</span></span><br><span class=\"line\">get(key: TK): TV &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 去重</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.has(key)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">Map</span>.prototype.get.call(<span class=\"keyword\">this</span>, key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// _factory 即为 collect 方法</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> value = <span class=\"keyword\">this</span>._factory(key);</span><br><span class=\"line\">    <span class=\"comment\">// 保存 &#123;entry: collect(entry)&#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.set(key, value);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在上述过滤过程中，仅仅只返回了 <code>entry-file</code> 的直接模块，而其他模块只是保存在 <code>Map</code> 中，还缺少最后一步 —— 调用 <code>traverse</code> 方法依次将这些模块保存到 <code>response.dependencies</code> 中，具体实现可以查看流程图和相应代码，由于不难理解，故在此不做更细致的分析了。</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/c4b5f11bly1flhln6q4ruj20u10i9aca.jpg\" alt=\"去重过滤\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.all([</span><br><span class=\"line\">        <span class=\"comment\">// 获取 entry-file 模块所有的直接依赖</span></span><br><span class=\"line\">        collectedDependencies.get(entry),</span><br><span class=\"line\">        collectionsInProgress.done,</span><br><span class=\"line\">    ])</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">[rootDependencies]</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.all(</span><br><span class=\"line\">            <span class=\"comment\">// 遍历 collectedDependencies，获取保存的所有 dependency</span></span><br><span class=\"line\">            <span class=\"built_in\">Array</span>.from(collectedDependencies, resolveKeyWithPromise),</span><br><span class=\"line\">        ).then(<span class=\"function\"><span class=\"params\">moduleToDependenciesPairs</span> =&gt;</span> [</span><br><span class=\"line\">            rootDependencies,</span><br><span class=\"line\">            <span class=\"keyword\">new</span> MapWithDefaults(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> [], moduleToDependenciesPairs),</span><br><span class=\"line\">        ]);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">[rootDependencies, moduleDependencies]</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// serialize dependencies, and make sure that every single one is only</span></span><br><span class=\"line\">        <span class=\"comment\">// included once</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> seen = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([entry]);</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">traverse</span>(<span class=\"params\">dependencies</span>) </span>&#123;</span><br><span class=\"line\">            dependencies.forEach(<span class=\"function\"><span class=\"params\">dependency</span> =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 再次去重，moduleDependencies 中包含了 rootDependencies，在 插入到 response.dependencies 前需要做这层过滤</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (seen.has(dependency)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                seen.add(dependency);</span><br><span class=\"line\">                <span class=\"comment\">// 依次将 dependency 插入到 response.dependencies</span></span><br><span class=\"line\">                response.pushDependency(dependency);</span><br><span class=\"line\">                <span class=\"comment\">// 递归调用 traverse</span></span><br><span class=\"line\">                traverse(moduleDependencies.get(dependency));</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        traverse(rootDependencies);</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"ModuleTransport-和合并\"><a href=\"#ModuleTransport-和合并\" class=\"headerlink\" title=\"ModuleTransport 和合并\"></a>ModuleTransport 和合并</h4><p>经过拆分、去重等处理，整个打包过程即将进入尾声 —— 将 <code>response.dependencies</code> 中的模块重新组合成一个新的 bundle。<br>首先，遍历 <code>response.dependencies</code> ，对其每个 module 进行 <code>ModuleTransport</code> 处理，这里需要区分普通 module 和 asset module，因为对应的解析方法是不同的；解析 module，获取并返回 transformedModule（包括 <code>code、sourceCode、sourcePath、map 和 polyfill</code> 等）。<br>此时，原材料均已准备完毕，开始进入组装阶段 <code>addModule</code>，针对 polyfill 处理过的模块调用 <code>definePolyfillCode</code> 方法进行包装，即用立即执行函数包装，polyfill 过的代码作为立即执行函数的主体；其他模块则调用 <code>defineModuleCode</code> 方法包装，即调用 <code>__d</code> 函数来定义模块，同时，将通过构建 <code>resolveDeps</code> 对象来处理其他多个模块依赖某一模块问题，在此处不过多分析，有兴趣的可以自行<a href=\"https://github.com/facebook/metro-bundler/blob/2a64bd390e1d546bf62e1437b8a8aa8a839990a2/packages/metro-bundler/src/Resolver/index.js#L184\" target=\"_blank\" rel=\"noopener\">探索</a>。<br>至此，所有的模块都已定义，将代码放在闭包中，注册到全局的 module 变量中。此时仅仅只是定义了模块，如果要让代码执行起来，最后需要一根线将所有 module 串起来，调用必要的代码 —— 通过 <code>finalize</code> 方法 require <code>InitializeCore</code> 和 <code>MainModule</code>（即 <code>entry-file</code> 资源入口）模块。当完成这一步，RN 的打包基本上就完成了。</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/c4b5f11bly1flhfzog8brj20ft0dn74s.jpg\" alt=\"代码转化与重组\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// metro-bundler/src/Bundler/Bundle.js</span></span><br><span class=\"line\">finalize(options: FinalizeOptions) &#123;</span><br><span class=\"line\">    options = options || &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (options.runModule) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 此处 require InitializeCore 模块</span></span><br><span class=\"line\">        <span class=\"comment\">// RN 在 metro-bundler/src/defaults.js 中默认添加了 InitializeCore 模块</span></span><br><span class=\"line\">        options.runBeforeMainModule.forEach(<span class=\"keyword\">this</span>._addRequireCall, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"comment\">// require MainModule</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>._addRequireCall(<span class=\"keyword\">this</span>.getMainModuleId());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// freeze 处理新 bundle 的 __modules 和 __assets</span></span><br><span class=\"line\">    <span class=\"keyword\">super</span>.finalize(options);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"QRN-打包定制化\"><a href=\"#QRN-打包定制化\" class=\"headerlink\" title=\"QRN 打包定制化\"></a>QRN 打包定制化</h2><p>尽管 RN 官方的打包工具的功能比较完善了，但的确仍有些地方可以进行优化：</p>\n<ul>\n<li>打包生成的 bundle 文件太大</li>\n<li>对 bundle 进行拆分后，模块关系变动使得分拆后的 bundle 难以保持一致</li>\n<li>静态资源离线</li>\n</ul>\n<h3 id=\"bundle-拆分\"><a href=\"#bundle-拆分\" class=\"headerlink\" title=\"bundle 拆分\"></a>bundle 拆分</h3><p>metro-bundler 在打包时，会将所有的文件，包括框架组件、业务逻辑代码，都打包到一个 bundle 中，笔者试着将一个没有任何业务逻辑代码的 AwesomeProject 项目，打包生成的 bundle 文件 size 约为 490 k。Qunar 拥有酒店、机票、旅游度假、门票和火车票等多个业务线，随着业务不断扩大、业务复杂性不断上升，生成的 bundle 文件会逐渐增大，将会使得客户端 size 的压力越来越大（虽然从 iOS 的 App Store 上使用流量下载客户端的限制从 100 M 放宽到 150 M）。<br>metro-bundler 这种打包成一个 bundle 的策略对于 Qunar 来说，必定是不能接受的。在 Hybrid 开发中，在解决文件过大问题的一个策略 —— 拆包，同样，对 RN bundle 拆分，也是适用的。metro-bundler 将项目的所有代码打包成一个 bundle，其中包括 RN 框架 js 文件和一些十分常用的第三方模块，不难发现，多个项目使用 RN 方案，生成的 bundle 文件将会包含多份一模一样的框架 js 和常用的第三方模块文件；因此，我们采取的策略是将框架代码和业务逻辑拆成两个 bundle，这样一方面解决了 bundle 文件大，代码重复问题，另一方面业务只需要将重心放在业务逻辑上，框架由我们来维护。</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/c4b5f11bly1flggh2fumnj20gy07egly.jpg\" alt=\"jsbundle\"></p>\n<p>我们在打包时先后调用两次 <code>bundle</code> 方法，通过 <code>bundleType</code> 参数进行区分框架 bundle 和业务 bundle。同时，在打包时默认不指定 <code>entry-file</code>，完全交给打包工具 QRNPackager 来处理，打框架 bundle 时默认指定一个 <code>platform.js</code> 文件，该文件 require RN 框架、QRN（包括自定义的组件和模块等），以及一些常用的第三方模块；而业务 bundle 则以项目入口文件为 <code>entry-file</code> 进行打包，当然仅仅是这样还不行，我们在 metro-bundler 拆包、去重过滤完成时，对 <code>response.dependencies</code> 再处理，通过 <code>platformDependencies</code>, <code>bizDependencies</code> 两个配置项，分别生成新的 <code>response.dependencies</code>。然后执行 metro-bundler 的后续流程。</p>\n<h3 id=\"以实际路径代替-module-ID-进行引用\"><a href=\"#以实际路径代替-module-ID-进行引用\" class=\"headerlink\" title=\"以实际路径代替 module ID 进行引用\"></a>以实际路径代替 module ID 进行引用</h3><p>metro-bundler 打包处理模块时，以递增的方式给每个模块一个 module ID，使得文件直接通过 <code>require(module ID)</code> 的方式引用其他模块；当然，一个项目的所有模块都在一个 bundle 中是没问题的，但进行 bundle 拆分后，当框架新增或删除一个依赖时，因为模块编号的方式使得在该状况下，后续的模块的 module ID 将会错位，这将造成升级框架 bundle 的难度，每次升级，其他业务 bundle 相应的需要回归测试，加大了开发测试成本。我们的选择是直接舍弃 module ID 的引用方式，直接使用模块路径进行引用，这样无论怎么增减模块，都不会出现模块引用错误的问题，做法也比较简单，重写了 <code>resolutionResponse.getModuleId</code> 方法，虽然会增大一点 bundle 的 size。</p>\n<h3 id=\"静态资源离线\"><a href=\"#静态资源离线\" class=\"headerlink\" title=\"静态资源离线\"></a>静态资源离线</h3><p>项目开发中少不了使用图片、字体等离线资源的使用，如果这些静态文件直接内置到本地，一方面不方便管理，另一方面也会增大 size 的压力。因此，一般采取的策略是将静态资源上传到服务器，但这也会导致其他问题 —— 用户流量消耗，增加请求，加载资源变慢影响性能。<br>针对种种问题，我们采取的策略是将开发时将资源上传到服务器，代码中直接通过 url 地址获取资源，同时对打包工具进行了改造，通过不同的配置文件记录项目使用的图片和字体等资源的 url 地址，打包时将之写入到 <code>staticAssets.json</code> 文件；另外客户端也进行相应的处理，第一次加载 bundle 时，会进行资源离线处理。当客户端加载静态资源时，请求会被拦截器拦截，优先使用本地的离线静态资源，如果本地没有对应资源，才会去服务器上获取。</p>\n<h2 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h2><p>笔者近期在升级 RN 的同时较系统地阅读了 metro-bundler 源码，结合自身的理解整理成该篇文章，希望对想要了解 RN 打包或正在解决 RN 打包问题的朋友有一点帮助。如果行文中有错误，敬请斧正。</p>\n","site":{"data":{}},"excerpt":"<p><a href=\"https://github.com/facebook/react-native/tree/v0.48.1\" target=\"_blank\" rel=\"noopener\">React Native</a> （以下简称 RN）是 Facebook 开源的一款跨平台移动端开发框架，它与 Hybrid 方案相比，性能更好，拥有更流畅的用户体验，而与原生客户端开发相比，开发成本低，效率高，能够快速进行版本迭代和产品上线。我们从16年3月份开始在公司大范围使用 <a href=\"https://ued.qunar.com/qrn/\" target=\"_blank\" rel=\"noopener\">QRN</a>（基于 RN 进行深度定制的移动开发框架），截至目前已有四十多个项目接入，我们在 RN 开发方面有着大量的踩坑经验，本文以 RN 打包作为切入点，分享一下 RN 官方在打包方面做了哪些处理，以及 QRN 在打包上进行了怎样的定制。<br>","more":"</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/c4b5f11bly1flggag4y6fj20du06vt9r.jpg\" alt=\"rn-metro-bundler\"></p>\n<h2 id=\"RN-打包\"><a href=\"#RN-打包\" class=\"headerlink\" title=\"RN 打包\"></a>RN 打包</h2><p>官方 RN 打包，基于一款 node 命令行工具 react-native-cli，通过执行 <code>bundle</code> 命令，将项目所有的的 js 文件打包成一个 bundle 文件，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">react-native bundle --entry-file index.js --platform ios --dev false --bundle-output ./index.ios.bundle --sourcemap-output ./index.ios.map --assets-dest ./asserts</span><br></pre></td></tr></table></figure>\n<p>iOS 通过 <code>NSBundle URLForResource</code> 方法加载，Android 通过 <code>loadScriptFromString</code> 加载 bundle 文件。RN 打包简而言之可以理解为对项目的所有模块（RN 认为一切皆模块，包括 js、json 和图片等）进行拆包、去重过滤、代码转化、重组成新的 bundle 的过程，以下笔者将会结合官方的 <a href=\"https://github.com/facebook/metro-bundler/tree/2a64bd390e1d546bf62e1437b8a8aa8a839990a2\" target=\"_blank\" rel=\"noopener\">metro-bundler</a> 工具来一探打包的奥妙。</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/c4b5f11bly1flhfzogn2mj20ac0bhjrp.jpg\" alt=\"总体流程\"></p>\n<h3 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h3><p>在分析官方打包的具体实现前，可以先从命令行入手，来提前了解下官方打包，通过指定参数来进行打包，以下主要介绍 <code>entry-file、platform、dev、bundle-output、sourcemap-output</code> 等几个重要的参数：</p>\n<ul>\n<li><strong>entry-file</strong>：即入口文件，打包时以该文件作为入口，一步步进行模块分析处理。</li>\n<li><strong>platform</strong>：用于区分打包什么平台的 bundle</li>\n<li><strong>dev</strong>：用于区分 bundle 使用环境，非 dev 时，会对代码进行 minified</li>\n<li><strong>bundle-output</strong>：打包产物输出地址，即打包好的 bundle 存放地址</li>\n<li><strong>sourcemap-output</strong>：打包时生成对应的 <a href=\"http://www.ruanyifeng.com/blog/2013/01/javascript_source_map.html\" target=\"_blank\" rel=\"noopener\">sourcemap</a> 文件存放地址，在跟踪查找错误或崩溃时，能帮助开发快速定位到代码</li>\n<li><strong>assets-dest</strong>：bundle 中使用的静态资源文件存放地址</li>\n</ul>\n<h3 id=\"metro-bundler\"><a href=\"#metro-bundler\" class=\"headerlink\" title=\"metro-bundler\"></a>metro-bundler</h3><p>RN 官方从 0.46.0 版本开始，出于对打包速度、可靠性和更好的可拓展性等方面的<a href=\"https://github.com/facebook/react-native/issues/13976\" target=\"_blank\" rel=\"noopener\">考虑</a>，将 RN 的打包模块 packager 从 RN 项目中分离，重新命名为 metro-bundler。</p>\n<h4 id=\"polyfill\"><a href=\"#polyfill\" class=\"headerlink\" title=\"polyfill\"></a>polyfill</h4><p>metro-bundler 在进入正式拆包前，先在 js 解释器上挂载  <code>global.__DEV__</code> 变量，该变量主要用于区分打包执行环境，同时定义了模块系统函数，包括 <code>__d</code>（即 <code>define</code>）函数、<code>require</code> 函数，这样 RN 也就有了自身的模块系统。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// metro-bundler/src/Resolver/index.js</span></span><br><span class=\"line\">getModuleSystemDependencies(&#123;dev = <span class=\"literal\">true</span>&#125;: &#123;dev?: boolean&#125;): <span class=\"built_in\">Array</span>&lt;Module&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// global.__DEV__</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> prelude = dev</span><br><span class=\"line\">        ? pathJoin(__dirname, <span class=\"string\">'polyfills/prelude_dev.js'</span>)</span><br><span class=\"line\">        : pathJoin(__dirname, <span class=\"string\">'polyfills/prelude.js'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回 polyfills/require.js，定义模块系统函数</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> moduleSystem = defaults.moduleSystem;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [prelude, moduleSystem].map(<span class=\"function\"><span class=\"params\">moduleName</span> =&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">// polyfill 处理</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>._depGraph.createPolyfill(&#123;</span><br><span class=\"line\">            file: moduleName,</span><br><span class=\"line\">            id: moduleName,</span><br><span class=\"line\">            dependencies: [],</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后，这两个模块会被插入到 <code>response.dependencies</code> 最前列。<br>另外，RN 对部分 es6、es7 的方法 polyfill 支持，包括 Array、Object 和 Number 等，具体可以查阅 <a href=\"https://github.com/facebook/react-native/tree/v0.48.1/Libraries/polyfills\" target=\"_blank\" rel=\"noopener\">polyfills</a> 文件，此处不再赘述，感兴趣可以自行研究。</p>\n<h4 id=\"拆包\"><a href=\"#拆包\" class=\"headerlink\" title=\"拆包\"></a>拆包</h4><p>拆包可以理解为对依赖进行模块预处理，根据资源入口，解析其所依赖的直接模块，调用 Module 构造器解析出模块 <code>path、_options 和 _transformCode</code> 等信息，并返回这些依赖自身所依赖的模块，然后，依次以返回的这些模块作为新的资源入口，进行解析直至广度遍历所有的依赖。<br>拆包具体实现是通过 <code>_preprocessPotentialDependencies</code> 方法，以指定的 <code>entry-file</code> 作为资源入口，依次解析它的依赖，并利用这些模块，依据 <code>filePath</code> 循环调用 <code>resolveDependency</code>，存入到 <code>ModuleCache</code> 实例中，最后以数组 <code>dependencyModules</code> 返回这些实例化后的 module；再次循环，从 <code>dependencyModules</code> 数组中依次取最后一个元素，递归调用 <code>preprocessModule</code> 和 <code>tryResolveModuleDependencies</code> 方法预处理所有的模块；当然，metro-bundler 设置了一个 <code>Set</code> 类型的 <code>visitedModulePaths</code> 变量进行过滤，实例化一个新的模块时，会将之添加到 <code>visitedModulePaths</code> 中，当出现已实例化过的模块，则不会再放入 <code>dependencyModules</code> 中，这避免了重复实例化同一个模块的问题。</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/c4b5f11bly1flhln6pxygj20np0kvjt4.jpg\" alt=\"模块拆包\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// metro-bundler/src/node-haste/DependencyGraph/ResolutionRequest.js</span></span><br><span class=\"line\">_preprocessPotentialDependencies(</span><br><span class=\"line\">    transformOptions: TransformWorkerOptions,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: TModule,</span><br><span class=\"line\">    onProgress: <span class=\"function\">(<span class=\"params\">moduleCount: number</span>) =&gt;</span> mixed,</span><br><span class=\"line\">): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> visitedModulePaths = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 此处的 module 为入口文件模块</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> pendingBatches = [</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.preprocessModule(transformOptions, <span class=\"built_in\">module</span>, visitedModulePaths),</span><br><span class=\"line\">    ];</span><br><span class=\"line\">    onProgress(visitedModulePaths.size);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (pendingBatches.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// dependencyModules：module（作为参数传给 preprocessModule） 依赖的子模块数组，已经过预处理过，数组元素将作为新的入口模块，预处理其子依赖</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> dependencyModules = pendingBatches.pop();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (dependencyModules.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// dependencyModule 作为新的入口模块，预处理其子依赖，通过遍历依次处理所有模块</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> dependencyModule = dependencyModules.pop();</span><br><span class=\"line\">            <span class=\"keyword\">const</span> deps = <span class=\"keyword\">this</span>.preprocessModule(</span><br><span class=\"line\">                transformOptions,</span><br><span class=\"line\">                dependencyModule,</span><br><span class=\"line\">                visitedModulePaths,</span><br><span class=\"line\">            );</span><br><span class=\"line\">            <span class=\"comment\">// 将预处理过的模块 deps 放入 pendingBatches，达到递归调用目的</span></span><br><span class=\"line\">            pendingBatches.push(deps);</span><br><span class=\"line\">            onProgress(visitedModulePaths.size);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"去重过滤\"><a href=\"#去重过滤\" class=\"headerlink\" title=\"去重过滤\"></a>去重过滤</h4><p>在拆包的过程中，会发现多个模块依赖同一个模块的情况，在进行模块预处理时进行的过滤，只能避免对统一模块重复预处理，没有真正将重复的模块过滤掉，因此还需要对重复模块做去重过滤。<br>去重的实现同样是以 <code>entry-file</code> 文件作为入口模块 <code>entry</code>，调用 <code>collectedDependencies.get</code> 方法，通过其中的 <code>collect</code> 函数，将 <code>entry</code> 模块的依赖拆分成 <code>[[depNames1, depNames2, ...], [dependencies1, dependencies2, ...]]</code> 形式的数组（<code>depNames</code> 和 <code>dependencies</code> 一一对应，前者为依赖名，后者为具体的预处理过的依赖）；再在 <code>crawlDependencies</code> 方法中遍历 <code>[dependencies1, dependencies2, ...]</code> 数组，将每个元素，即 <code>dependencyModules</code> 依次作为新的资源入口，递归调用 <code>collectedDependencies.get</code>，<code>get</code> 方法会将入口模块以 <code>{entry: collect(entry)}</code> 形式保存到一个 <code>Map</code> 中，在保存前会通过 <code>Map.has(entry)</code> 检查是否存在，以达到去重的目的。最后，返回 <code>entry-file</code> 模块的直接依赖。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// metro-bundler/src/node-haste/DependencyGraph/ResolutionRequest.js</span></span><br><span class=\"line\"><span class=\"comment\">// depNames：模块名数组，dependencies：对应模块数组</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> crawlDependencies = <span class=\"function\">(<span class=\"params\">mod, [depNames, dependencies]</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> filteredPairs = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    dependencies.forEach(<span class=\"function\">(<span class=\"params\">modDep, i</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> name = depNames[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (modDep == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            debug(</span><br><span class=\"line\">                <span class=\"string\">'WARNING: Cannot find required module `%s` from module `%s`'</span>,</span><br><span class=\"line\">                name,</span><br><span class=\"line\">                mod.path,</span><br><span class=\"line\">            );</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> filteredPairs.push([name, modDep]);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    response.setResolvedDependencyPairs(mod, filteredPairs);</span><br><span class=\"line\">    <span class=\"comment\">// 遍历取到所有的模块</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> dependencyModules = filteredPairs.map(<span class=\"function\">(<span class=\"params\">[, m]</span>) =&gt;</span> m);</span><br><span class=\"line\">    <span class=\"comment\">// 统计 newDependencies 的长度主要用于 onProgress 显示进度，可忽略</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> newDependencies = dependencyModules.filter(</span><br><span class=\"line\">        m =&gt; !collectedDependencies.has(m),</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (onProgress) &#123;</span><br><span class=\"line\">        finishedModules += <span class=\"number\">1</span>;</span><br><span class=\"line\">        totalModules += newDependencies.length;</span><br><span class=\"line\">        onProgress(</span><br><span class=\"line\">            finishedModules,</span><br><span class=\"line\">            <span class=\"built_in\">Math</span>.max(totalModules, preprocessedModuleCount),</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (recursive) &#123; <span class=\"comment\">// recursive 为标志位，默认为 true</span></span><br><span class=\"line\">        <span class=\"comment\">// doesn't block the return of this function invocation, but defers</span></span><br><span class=\"line\">        <span class=\"comment\">// the resulution of collectionsInProgress.done.then(...)</span></span><br><span class=\"line\">        <span class=\"comment\">// 遍历 dependencyModules，递归调用 collectedDependencies.get</span></span><br><span class=\"line\">        dependencyModules.forEach(<span class=\"function\"><span class=\"params\">dependency</span> =&gt;</span></span><br><span class=\"line\">            collectedDependencies.get(dependency),</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 返回 rootDependencies</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> dependencyModules;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// metro-bundler/src/node-haste/lib/MapWithDefaults.js</span></span><br><span class=\"line\">get(key: TK): TV &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 去重</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.has(key)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">Map</span>.prototype.get.call(<span class=\"keyword\">this</span>, key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// _factory 即为 collect 方法</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> value = <span class=\"keyword\">this</span>._factory(key);</span><br><span class=\"line\">    <span class=\"comment\">// 保存 &#123;entry: collect(entry)&#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.set(key, value);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在上述过滤过程中，仅仅只返回了 <code>entry-file</code> 的直接模块，而其他模块只是保存在 <code>Map</code> 中，还缺少最后一步 —— 调用 <code>traverse</code> 方法依次将这些模块保存到 <code>response.dependencies</code> 中，具体实现可以查看流程图和相应代码，由于不难理解，故在此不做更细致的分析了。</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/c4b5f11bly1flhln6q4ruj20u10i9aca.jpg\" alt=\"去重过滤\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.all([</span><br><span class=\"line\">        <span class=\"comment\">// 获取 entry-file 模块所有的直接依赖</span></span><br><span class=\"line\">        collectedDependencies.get(entry),</span><br><span class=\"line\">        collectionsInProgress.done,</span><br><span class=\"line\">    ])</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">[rootDependencies]</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.all(</span><br><span class=\"line\">            <span class=\"comment\">// 遍历 collectedDependencies，获取保存的所有 dependency</span></span><br><span class=\"line\">            <span class=\"built_in\">Array</span>.from(collectedDependencies, resolveKeyWithPromise),</span><br><span class=\"line\">        ).then(<span class=\"function\"><span class=\"params\">moduleToDependenciesPairs</span> =&gt;</span> [</span><br><span class=\"line\">            rootDependencies,</span><br><span class=\"line\">            <span class=\"keyword\">new</span> MapWithDefaults(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> [], moduleToDependenciesPairs),</span><br><span class=\"line\">        ]);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">[rootDependencies, moduleDependencies]</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// serialize dependencies, and make sure that every single one is only</span></span><br><span class=\"line\">        <span class=\"comment\">// included once</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> seen = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([entry]);</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">traverse</span>(<span class=\"params\">dependencies</span>) </span>&#123;</span><br><span class=\"line\">            dependencies.forEach(<span class=\"function\"><span class=\"params\">dependency</span> =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 再次去重，moduleDependencies 中包含了 rootDependencies，在 插入到 response.dependencies 前需要做这层过滤</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (seen.has(dependency)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                seen.add(dependency);</span><br><span class=\"line\">                <span class=\"comment\">// 依次将 dependency 插入到 response.dependencies</span></span><br><span class=\"line\">                response.pushDependency(dependency);</span><br><span class=\"line\">                <span class=\"comment\">// 递归调用 traverse</span></span><br><span class=\"line\">                traverse(moduleDependencies.get(dependency));</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        traverse(rootDependencies);</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"ModuleTransport-和合并\"><a href=\"#ModuleTransport-和合并\" class=\"headerlink\" title=\"ModuleTransport 和合并\"></a>ModuleTransport 和合并</h4><p>经过拆分、去重等处理，整个打包过程即将进入尾声 —— 将 <code>response.dependencies</code> 中的模块重新组合成一个新的 bundle。<br>首先，遍历 <code>response.dependencies</code> ，对其每个 module 进行 <code>ModuleTransport</code> 处理，这里需要区分普通 module 和 asset module，因为对应的解析方法是不同的；解析 module，获取并返回 transformedModule（包括 <code>code、sourceCode、sourcePath、map 和 polyfill</code> 等）。<br>此时，原材料均已准备完毕，开始进入组装阶段 <code>addModule</code>，针对 polyfill 处理过的模块调用 <code>definePolyfillCode</code> 方法进行包装，即用立即执行函数包装，polyfill 过的代码作为立即执行函数的主体；其他模块则调用 <code>defineModuleCode</code> 方法包装，即调用 <code>__d</code> 函数来定义模块，同时，将通过构建 <code>resolveDeps</code> 对象来处理其他多个模块依赖某一模块问题，在此处不过多分析，有兴趣的可以自行<a href=\"https://github.com/facebook/metro-bundler/blob/2a64bd390e1d546bf62e1437b8a8aa8a839990a2/packages/metro-bundler/src/Resolver/index.js#L184\" target=\"_blank\" rel=\"noopener\">探索</a>。<br>至此，所有的模块都已定义，将代码放在闭包中，注册到全局的 module 变量中。此时仅仅只是定义了模块，如果要让代码执行起来，最后需要一根线将所有 module 串起来，调用必要的代码 —— 通过 <code>finalize</code> 方法 require <code>InitializeCore</code> 和 <code>MainModule</code>（即 <code>entry-file</code> 资源入口）模块。当完成这一步，RN 的打包基本上就完成了。</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/c4b5f11bly1flhfzog8brj20ft0dn74s.jpg\" alt=\"代码转化与重组\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// metro-bundler/src/Bundler/Bundle.js</span></span><br><span class=\"line\">finalize(options: FinalizeOptions) &#123;</span><br><span class=\"line\">    options = options || &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (options.runModule) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 此处 require InitializeCore 模块</span></span><br><span class=\"line\">        <span class=\"comment\">// RN 在 metro-bundler/src/defaults.js 中默认添加了 InitializeCore 模块</span></span><br><span class=\"line\">        options.runBeforeMainModule.forEach(<span class=\"keyword\">this</span>._addRequireCall, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"comment\">// require MainModule</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>._addRequireCall(<span class=\"keyword\">this</span>.getMainModuleId());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// freeze 处理新 bundle 的 __modules 和 __assets</span></span><br><span class=\"line\">    <span class=\"keyword\">super</span>.finalize(options);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"QRN-打包定制化\"><a href=\"#QRN-打包定制化\" class=\"headerlink\" title=\"QRN 打包定制化\"></a>QRN 打包定制化</h2><p>尽管 RN 官方的打包工具的功能比较完善了，但的确仍有些地方可以进行优化：</p>\n<ul>\n<li>打包生成的 bundle 文件太大</li>\n<li>对 bundle 进行拆分后，模块关系变动使得分拆后的 bundle 难以保持一致</li>\n<li>静态资源离线</li>\n</ul>\n<h3 id=\"bundle-拆分\"><a href=\"#bundle-拆分\" class=\"headerlink\" title=\"bundle 拆分\"></a>bundle 拆分</h3><p>metro-bundler 在打包时，会将所有的文件，包括框架组件、业务逻辑代码，都打包到一个 bundle 中，笔者试着将一个没有任何业务逻辑代码的 AwesomeProject 项目，打包生成的 bundle 文件 size 约为 490 k。Qunar 拥有酒店、机票、旅游度假、门票和火车票等多个业务线，随着业务不断扩大、业务复杂性不断上升，生成的 bundle 文件会逐渐增大，将会使得客户端 size 的压力越来越大（虽然从 iOS 的 App Store 上使用流量下载客户端的限制从 100 M 放宽到 150 M）。<br>metro-bundler 这种打包成一个 bundle 的策略对于 Qunar 来说，必定是不能接受的。在 Hybrid 开发中，在解决文件过大问题的一个策略 —— 拆包，同样，对 RN bundle 拆分，也是适用的。metro-bundler 将项目的所有代码打包成一个 bundle，其中包括 RN 框架 js 文件和一些十分常用的第三方模块，不难发现，多个项目使用 RN 方案，生成的 bundle 文件将会包含多份一模一样的框架 js 和常用的第三方模块文件；因此，我们采取的策略是将框架代码和业务逻辑拆成两个 bundle，这样一方面解决了 bundle 文件大，代码重复问题，另一方面业务只需要将重心放在业务逻辑上，框架由我们来维护。</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/c4b5f11bly1flggh2fumnj20gy07egly.jpg\" alt=\"jsbundle\"></p>\n<p>我们在打包时先后调用两次 <code>bundle</code> 方法，通过 <code>bundleType</code> 参数进行区分框架 bundle 和业务 bundle。同时，在打包时默认不指定 <code>entry-file</code>，完全交给打包工具 QRNPackager 来处理，打框架 bundle 时默认指定一个 <code>platform.js</code> 文件，该文件 require RN 框架、QRN（包括自定义的组件和模块等），以及一些常用的第三方模块；而业务 bundle 则以项目入口文件为 <code>entry-file</code> 进行打包，当然仅仅是这样还不行，我们在 metro-bundler 拆包、去重过滤完成时，对 <code>response.dependencies</code> 再处理，通过 <code>platformDependencies</code>, <code>bizDependencies</code> 两个配置项，分别生成新的 <code>response.dependencies</code>。然后执行 metro-bundler 的后续流程。</p>\n<h3 id=\"以实际路径代替-module-ID-进行引用\"><a href=\"#以实际路径代替-module-ID-进行引用\" class=\"headerlink\" title=\"以实际路径代替 module ID 进行引用\"></a>以实际路径代替 module ID 进行引用</h3><p>metro-bundler 打包处理模块时，以递增的方式给每个模块一个 module ID，使得文件直接通过 <code>require(module ID)</code> 的方式引用其他模块；当然，一个项目的所有模块都在一个 bundle 中是没问题的，但进行 bundle 拆分后，当框架新增或删除一个依赖时，因为模块编号的方式使得在该状况下，后续的模块的 module ID 将会错位，这将造成升级框架 bundle 的难度，每次升级，其他业务 bundle 相应的需要回归测试，加大了开发测试成本。我们的选择是直接舍弃 module ID 的引用方式，直接使用模块路径进行引用，这样无论怎么增减模块，都不会出现模块引用错误的问题，做法也比较简单，重写了 <code>resolutionResponse.getModuleId</code> 方法，虽然会增大一点 bundle 的 size。</p>\n<h3 id=\"静态资源离线\"><a href=\"#静态资源离线\" class=\"headerlink\" title=\"静态资源离线\"></a>静态资源离线</h3><p>项目开发中少不了使用图片、字体等离线资源的使用，如果这些静态文件直接内置到本地，一方面不方便管理，另一方面也会增大 size 的压力。因此，一般采取的策略是将静态资源上传到服务器，但这也会导致其他问题 —— 用户流量消耗，增加请求，加载资源变慢影响性能。<br>针对种种问题，我们采取的策略是将开发时将资源上传到服务器，代码中直接通过 url 地址获取资源，同时对打包工具进行了改造，通过不同的配置文件记录项目使用的图片和字体等资源的 url 地址，打包时将之写入到 <code>staticAssets.json</code> 文件；另外客户端也进行相应的处理，第一次加载 bundle 时，会进行资源离线处理。当客户端加载静态资源时，请求会被拦截器拦截，优先使用本地的离线静态资源，如果本地没有对应资源，才会去服务器上获取。</p>\n<h2 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h2><p>笔者近期在升级 RN 的同时较系统地阅读了 metro-bundler 源码，结合自身的理解整理成该篇文章，希望对想要了解 RN 打包或正在解决 RN 打包问题的朋友有一点帮助。如果行文中有错误，敬请斧正。</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjf3nkt4500093i433l57l298","category_id":"cjf3njt0z00073i436y3gbzwf","_id":"cjf3nkt47000c3i437wgp8t1w"}],"PostTag":[{"post_id":"cjf3nkt4500093i433l57l298","tag_id":"cjf3nj5vr00023i4303akx4k1","_id":"cjf3nkt47000a3i43qrjag8i8"},{"post_id":"cjf3nkt4500093i433l57l298","tag_id":"cjf3nj5vs00033i43th2a6mst","_id":"cjf3nkt47000b3i43a5g3vkvo"}],"Tag":[{"name":"RN","_id":"cjf3nj5vr00023i4303akx4k1"},{"name":"QRN","_id":"cjf3nj5vs00033i43th2a6mst"}]}}